; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %.frozen = freeze i32 %6
  %7 = sdiv i32 %.frozen, 4, !dbg !11
  %8 = srem i32 %7, 1024, !dbg !12
  %9 = srem i32 %7, 32, !dbg !13
  %10 = mul i32 %7, 4
  %.decomposed = sub i32 %.frozen, %10
  %11 = shl nsw i32 %.decomposed, 7, !dbg !14
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !15
  %13 = and i32 %12, 31, !dbg !15
  %14 = lshr i32 %12, 5, !dbg !15
  %15 = lshr i32 %12, 3, !dbg !15
  %16 = and i32 %15, 7, !dbg !15
  %17 = and i32 %12, 64, !dbg !15
  %18 = lshr exact i32 %17, 3, !dbg !15
  %19 = or disjoint i32 %16, %18, !dbg !15
  %20 = or disjoint i32 %19, 16, !dbg !15
  %21 = or disjoint i32 %19, 32, !dbg !15
  %22 = or disjoint i32 %19, 48, !dbg !15
  %23 = or disjoint i32 %19, 64, !dbg !15
  %24 = or disjoint i32 %19, 80, !dbg !15
  %25 = or disjoint i32 %19, 96, !dbg !15
  %26 = or disjoint i32 %19, 112, !dbg !15
  %27 = lshr i32 %12, 2, !dbg !15
  %28 = and i32 %27, 7, !dbg !15
  %29 = lshr i32 %12, 1, !dbg !15
  %30 = and i32 %29, 16, !dbg !15
  %31 = or disjoint i32 %28, %30, !dbg !15
  %32 = lshr exact i32 %17, 1, !dbg !15
  %33 = or disjoint i32 %31, %32, !dbg !15
  %34 = or disjoint i32 %11, %19, !dbg !16
  %35 = or disjoint i32 %11, %20, !dbg !16
  %36 = or disjoint i32 %11, %21, !dbg !16
  %37 = or disjoint i32 %11, %22, !dbg !16
  %38 = or disjoint i32 %11, %23, !dbg !16
  %39 = or disjoint i32 %11, %24, !dbg !16
  %40 = or disjoint i32 %11, %25, !dbg !16
  %41 = or disjoint i32 %11, %26, !dbg !16
  %42 = or disjoint i32 %33, %11, !dbg !16
  %43 = or disjoint i32 %42, 8, !dbg !16
  %44 = or disjoint i32 %42, 64, !dbg !16
  %45 = or disjoint i32 %42, 72, !dbg !16
  %46 = shl i32 %12, 3, !dbg !17
  %47 = and i32 %46, 56, !dbg !17
  %48 = shl i32 %12, 1, !dbg !18
  %49 = and i32 %48, 6, !dbg !18
  %50 = shl nsw i32 %34, 6, !dbg !19
  %51 = shl nsw i32 %35, 6, !dbg !19
  %52 = shl nsw i32 %36, 6, !dbg !19
  %53 = shl nsw i32 %37, 6, !dbg !19
  %54 = shl nsw i32 %38, 6, !dbg !19
  %55 = shl nsw i32 %39, 6, !dbg !19
  %56 = shl nsw i32 %40, 6, !dbg !19
  %57 = shl nsw i32 %41, 6, !dbg !19
  %58 = shl nsw i32 %8, 15, !dbg !20
  %59 = or disjoint i32 %58, %47, !dbg !21
  %60 = add nsw i32 %59, %50, !dbg !22
  %61 = add nsw i32 %59, %51, !dbg !22
  %62 = add nsw i32 %59, %52, !dbg !22
  %63 = add nsw i32 %59, %53, !dbg !22
  %64 = add nsw i32 %59, %54, !dbg !22
  %65 = add nsw i32 %59, %55, !dbg !22
  %66 = add nsw i32 %59, %56, !dbg !22
  %67 = add nsw i32 %59, %57, !dbg !22
  %68 = sext i32 %60 to i64, !dbg !23
  %69 = getelementptr i16, ptr addrspace(1) %1, i64 %68, !dbg !23
  %70 = sext i32 %61 to i64, !dbg !23
  %71 = getelementptr i16, ptr addrspace(1) %1, i64 %70, !dbg !23
  %72 = sext i32 %62 to i64, !dbg !23
  %73 = getelementptr i16, ptr addrspace(1) %1, i64 %72, !dbg !23
  %74 = sext i32 %63 to i64, !dbg !23
  %75 = getelementptr i16, ptr addrspace(1) %1, i64 %74, !dbg !23
  %76 = sext i32 %64 to i64, !dbg !23
  %77 = getelementptr i16, ptr addrspace(1) %1, i64 %76, !dbg !23
  %78 = sext i32 %65 to i64, !dbg !23
  %79 = getelementptr i16, ptr addrspace(1) %1, i64 %78, !dbg !23
  %80 = sext i32 %66 to i64, !dbg !23
  %81 = getelementptr i16, ptr addrspace(1) %1, i64 %80, !dbg !23
  %82 = sext i32 %67 to i64, !dbg !23
  %83 = getelementptr i16, ptr addrspace(1) %1, i64 %82, !dbg !23
  %84 = add nsw i32 %9, 1, !dbg !24
  %85 = sitofp i32 %84 to float, !dbg !25
  %86 = fmul float %85, 8.000000e+00, !dbg !26
  %87 = fmul float %86, 3.125000e-02, !dbg !27
  %88 = fsub float 0.000000e+00, %87, !dbg !28
  %.lhs.trunc = trunc nsw i32 %8 to i16, !dbg !29
  %89 = srem i16 %.lhs.trunc, 32, !dbg !29
  %narrow = add nsw i16 %89, 1, !dbg !30
  %90 = sitofp i16 %narrow to float, !dbg !31
  %91 = fmul float %90, 8.000000e+00, !dbg !32
  %92 = fmul float %91, 3.125000e-02, !dbg !33
  %93 = fsub float 0.000000e+00, %92, !dbg !34
  %94 = shl nuw nsw i32 %19, 6, !dbg !35
  %95 = xor i32 %15, %12, !dbg !35
  %96 = shl i32 %95, 3, !dbg !35
  %97 = and i32 %96, 56, !dbg !35
  %98 = or disjoint i32 %94, %97, !dbg !35
  %99 = zext nneg i32 %98 to i64, !dbg !35
  %100 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %99, !dbg !35
  %101 = shl nuw nsw i32 %20, 6, !dbg !35
  %102 = or disjoint i32 %101, %97, !dbg !35
  %103 = zext nneg i32 %102 to i64, !dbg !35
  %104 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %103, !dbg !35
  %105 = shl nuw nsw i32 %21, 6, !dbg !35
  %106 = or disjoint i32 %105, %97, !dbg !35
  %107 = zext nneg i32 %106 to i64, !dbg !35
  %108 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %107, !dbg !35
  %109 = shl nuw nsw i32 %22, 6, !dbg !35
  %110 = or disjoint i32 %109, %97, !dbg !35
  %111 = zext nneg i32 %110 to i64, !dbg !35
  %112 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %111, !dbg !35
  %113 = shl nuw nsw i32 %23, 6, !dbg !35
  %114 = or disjoint i32 %113, %97, !dbg !35
  %115 = zext nneg i32 %114 to i64, !dbg !35
  %116 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %115, !dbg !35
  %117 = shl nuw nsw i32 %24, 6, !dbg !35
  %118 = or disjoint i32 %117, %97, !dbg !35
  %119 = zext nneg i32 %118 to i64, !dbg !35
  %120 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %119, !dbg !35
  %121 = shl nuw nsw i32 %25, 6, !dbg !35
  %122 = or disjoint i32 %121, %97, !dbg !35
  %123 = zext nneg i32 %122 to i64, !dbg !35
  %124 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %123, !dbg !35
  %125 = shl nuw nsw i32 %26, 6, !dbg !35
  %126 = or disjoint i32 %125, %97, !dbg !35
  %127 = zext nneg i32 %126 to i64, !dbg !35
  %128 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %127, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %100, ptr addrspace(1) %69, i32 16, i1 true) #5, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %104, ptr addrspace(1) %71, i32 16, i1 true) #5, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %108, ptr addrspace(1) %73, i32 16, i1 true) #5, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %112, ptr addrspace(1) %75, i32 16, i1 true) #5, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %116, ptr addrspace(1) %77, i32 16, i1 true) #5, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %120, ptr addrspace(1) %79, i32 16, i1 true) #5, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %124, ptr addrspace(1) %81, i32 16, i1 true) #5, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %128, ptr addrspace(1) %83, i32 16, i1 true) #5, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #5, !dbg !35
  %129 = or disjoint i32 %94, %47, !dbg !36
  %130 = or disjoint i32 %101, %47, !dbg !36
  %131 = or disjoint i32 %129, %58, !dbg !37
  %132 = or disjoint i32 %130, %58, !dbg !37
  %133 = sext i32 %131 to i64, !dbg !38
  %134 = getelementptr i16, ptr addrspace(1) %2, i64 %133, !dbg !38
  %135 = sext i32 %132 to i64, !dbg !38
  %136 = getelementptr i16, ptr addrspace(1) %2, i64 %135, !dbg !38
  %137 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %99, !dbg !39
  %138 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %103, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %137, ptr addrspace(1) %134, i32 16, i1 true) #5, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %138, ptr addrspace(1) %136, i32 16, i1 true) #5, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #5, !dbg !39
  %139 = getelementptr i16, ptr addrspace(1) %3, i64 %133, !dbg !40
  %140 = getelementptr i16, ptr addrspace(1) %3, i64 %135, !dbg !40
  %141 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %99, !dbg !41
  %142 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %103, !dbg !41
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %141, ptr addrspace(1) %139, i32 16, i1 true) #5, !dbg !41
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %142, ptr addrspace(1) %140, i32 16, i1 true) #5, !dbg !41
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %143 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %99, !dbg !35
  %144 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %103, !dbg !35
  %145 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %107, !dbg !35
  %146 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %111, !dbg !35
  %147 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %115, !dbg !35
  %148 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %119, !dbg !35
  %149 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %123, !dbg !35
  %150 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %127, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %143, ptr addrspace(1) %69, i32 16, i1 true) #5, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %144, ptr addrspace(1) %71, i32 16, i1 true) #5, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %145, ptr addrspace(1) %73, i32 16, i1 true) #5, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %146, ptr addrspace(1) %75, i32 16, i1 true) #5, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %147, ptr addrspace(1) %77, i32 16, i1 true) #5, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %148, ptr addrspace(1) %79, i32 16, i1 true) #5, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %149, ptr addrspace(1) %81, i32 16, i1 true) #5, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %150, ptr addrspace(1) %83, i32 16, i1 true) #5, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #5, !dbg !35
  %151 = or i32 %131, 2048, !dbg !37
  %152 = or i32 %131, 3072, !dbg !37
  %153 = sext i32 %151 to i64, !dbg !38
  %154 = getelementptr i16, ptr addrspace(1) %2, i64 %153, !dbg !38
  %155 = sext i32 %152 to i64, !dbg !38
  %156 = getelementptr i16, ptr addrspace(1) %2, i64 %155, !dbg !38
  %157 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %99, !dbg !39
  %158 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %103, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %157, ptr addrspace(1) %154, i32 16, i1 true) #5, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %158, ptr addrspace(1) %156, i32 16, i1 true) #5, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #5, !dbg !39
  %159 = getelementptr i16, ptr addrspace(1) %3, i64 %153, !dbg !40
  %160 = getelementptr i16, ptr addrspace(1) %3, i64 %155, !dbg !40
  %161 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 45056), i64 %99, !dbg !41
  %162 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 45056), i64 %103, !dbg !41
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %161, ptr addrspace(1) %159, i32 16, i1 true) #5, !dbg !41
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %162, ptr addrspace(1) %160, i32 16, i1 true) #5, !dbg !41
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #5, !dbg !41
  tail call void asm sideeffect "cp.async.wait_group 0x3;", ""() #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %163 = and i32 %14, 3
  %164 = and i32 %12, 7
  %165 = and i32 %15, 1
  %166 = lshr i32 %13, 4
  %167 = shl nuw nsw i32 %163, 1
  %168 = or disjoint i32 %167, %165
  %169 = or disjoint i32 %166, 2
  %170 = or disjoint i32 %166, 4
  %171 = or disjoint i32 %166, 6
  %172 = or disjoint i32 %165, 2
  %173 = or disjoint i32 %165, 4
  %174 = or disjoint i32 %165, 6
  %175 = lshr i32 %13, 2
  %176 = shl nuw nsw i32 %163, 4
  %177 = or disjoint i32 %176, %175
  %178 = mul nuw nsw i32 %177, 34
  %179 = add nuw nsw i32 %178, %49
  %180 = zext nneg i32 %179 to i64
  %181 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %180
  %182 = add nuw nsw i32 %178, 272
  %183 = add nuw nsw i32 %182, %49
  %184 = zext nneg i32 %183 to i64
  %185 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %184
  %186 = or disjoint i32 %49, 8
  %187 = add nuw nsw i32 %178, %186
  %188 = zext nneg i32 %187 to i64
  %189 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %188
  %190 = add nuw nsw i32 %182, %186
  %191 = zext nneg i32 %190 to i64
  %192 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %191
  %193 = or disjoint i32 %49, 16
  %194 = add nuw nsw i32 %178, %193
  %195 = zext nneg i32 %194 to i64
  %196 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %195
  %197 = add nuw nsw i32 %182, %193
  %198 = zext nneg i32 %197 to i64
  %199 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %198
  %200 = or disjoint i32 %49, 24
  %201 = add nuw nsw i32 %178, %200
  %202 = zext nneg i32 %201 to i64
  %203 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %202
  %204 = add nuw nsw i32 %182, %200
  %205 = zext nneg i32 %204 to i64
  %206 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %205
  %207 = or disjoint i32 %167, %166
  %208 = and i32 %48, 30
  %209 = mul nuw nsw i32 %207, 68
  %210 = add nuw nsw i32 %209, %208
  %211 = zext nneg i32 %210 to i64
  %212 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %211
  %213 = getelementptr i8, ptr addrspace(3) %212, i64 136
  %214 = getelementptr i8, ptr addrspace(3) %212, i64 2176
  %215 = getelementptr i8, ptr addrspace(3) %212, i64 2312
  %216 = getelementptr i8, ptr addrspace(3) %212, i64 4352
  %217 = getelementptr i8, ptr addrspace(3) %212, i64 4488
  %218 = getelementptr i8, ptr addrspace(3) %212, i64 6528
  %219 = getelementptr i8, ptr addrspace(3) %212, i64 6664
  %220 = and i32 %15, 6
  %221 = or disjoint i32 %220, %18
  %222 = lshr exact i32 %220, 1
  %223 = shl nuw nsw i32 %221, 5
  %224 = and i32 %27, 3
  %225 = xor i32 %222, %224
  %226 = shl nuw nsw i32 %225, 3
  %227 = or disjoint i32 %226, %223
  %228 = or disjoint i32 %227, %49
  %229 = zext nneg i32 %228 to i64
  %230 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %229
  %231 = or i32 %228, 32
  %232 = zext nneg i32 %231 to i64
  %233 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %232
  %234 = or i32 %228, 512
  %235 = zext nneg i32 %234 to i64
  %236 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %235
  %237 = or i32 %228, 544
  %238 = zext nneg i32 %237 to i64
  %239 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %238
  %240 = or i32 %228, 1024
  %241 = zext nneg i32 %240 to i64
  %242 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %241
  %243 = or i32 %228, 1056
  %244 = zext nneg i32 %243 to i64
  %245 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %244
  %246 = or i32 %228, 1536
  %247 = zext nneg i32 %246 to i64
  %248 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %247
  %249 = or i32 %228, 1568
  %250 = zext nneg i32 %249 to i64
  %251 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %250
  %252 = or i32 %228, 2048
  %253 = zext nneg i32 %252 to i64
  %254 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %253
  %255 = or i32 %228, 2080
  %256 = zext nneg i32 %255 to i64
  %257 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %256
  %258 = or i32 %228, 2560
  %259 = zext nneg i32 %258 to i64
  %260 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %259
  %261 = or i32 %228, 2592
  %262 = zext nneg i32 %261 to i64
  %263 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %262
  %264 = or i32 %228, 3072
  %265 = zext nneg i32 %264 to i64
  %266 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %265
  %267 = or i32 %228, 3104
  %268 = zext nneg i32 %267 to i64
  %269 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %268
  %270 = or i32 %228, 3584
  %271 = zext nneg i32 %270 to i64
  %272 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %271
  %273 = or i32 %228, 3616
  %274 = zext nneg i32 %273 to i64
  %275 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %274
  %276 = and i32 %12, 24
  %277 = or disjoint i32 %276, %49
  %278 = shl nuw nsw i32 %163, 9
  %279 = shl nuw nsw i32 %175, 5
  %280 = or disjoint i32 %278, %279
  %281 = or disjoint i32 %280, %277
  %282 = zext nneg i32 %281 to i64
  %283 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %282
  %284 = getelementptr i8, ptr addrspace(3) %283, i64 1024
  %285 = xor i32 %281, 8
  %286 = zext nneg i32 %285 to i64
  %287 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %286
  %288 = getelementptr i8, ptr addrspace(3) %287, i64 1024
  %289 = xor i32 %281, 16
  %290 = zext nneg i32 %289 to i64
  %291 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %290
  %292 = getelementptr i8, ptr addrspace(3) %291, i64 1024
  %293 = xor i32 %281, 24
  %294 = zext nneg i32 %293 to i64
  %295 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %294
  %296 = getelementptr i8, ptr addrspace(3) %295, i64 1024
  %297 = getelementptr i8, ptr addrspace(3) %283, i64 8192
  %298 = getelementptr i8, ptr addrspace(3) %283, i64 9216
  %299 = getelementptr i8, ptr addrspace(3) %287, i64 8192
  %300 = getelementptr i8, ptr addrspace(3) %287, i64 9216
  %301 = getelementptr i8, ptr addrspace(3) %291, i64 8192
  %302 = getelementptr i8, ptr addrspace(3) %291, i64 9216
  %303 = getelementptr i8, ptr addrspace(3) %295, i64 8192
  %304 = getelementptr i8, ptr addrspace(3) %295, i64 9216
  %305 = getelementptr inbounds i8, ptr addrspace(3) %283, i64 4
  %306 = getelementptr i8, ptr addrspace(3) %283, i64 1028
  %307 = getelementptr inbounds i8, ptr addrspace(3) %287, i64 4
  %308 = getelementptr i8, ptr addrspace(3) %287, i64 1028
  %309 = getelementptr inbounds i8, ptr addrspace(3) %291, i64 4
  %310 = getelementptr i8, ptr addrspace(3) %291, i64 1028
  %311 = getelementptr inbounds i8, ptr addrspace(3) %295, i64 4
  %312 = getelementptr i8, ptr addrspace(3) %295, i64 1028
  %313 = getelementptr i8, ptr addrspace(3) %283, i64 8196
  %314 = getelementptr i8, ptr addrspace(3) %283, i64 9220
  %315 = getelementptr i8, ptr addrspace(3) %287, i64 8196
  %316 = getelementptr i8, ptr addrspace(3) %287, i64 9220
  %317 = getelementptr i8, ptr addrspace(3) %291, i64 8196
  %318 = getelementptr i8, ptr addrspace(3) %291, i64 9220
  %319 = getelementptr i8, ptr addrspace(3) %295, i64 8196
  %320 = getelementptr i8, ptr addrspace(3) %295, i64 9220
  %321 = xor i32 %166, %164
  %322 = shl nuw nsw i32 %168, 9
  %323 = shl nuw nsw i32 %164, 6
  %324 = or disjoint i32 %322, %323
  %325 = shl nuw nsw i32 %321, 3
  %326 = or disjoint i32 %325, %324
  %327 = zext nneg i32 %326 to i64
  %328 = xor i32 %169, %164
  %329 = shl nuw nsw i32 %328, 3
  %330 = or disjoint i32 %329, %324
  %331 = zext nneg i32 %330 to i64
  %332 = xor i32 %170, %164
  %333 = shl nuw nsw i32 %332, 3
  %334 = or disjoint i32 %333, %324
  %335 = zext nneg i32 %334 to i64
  %336 = xor i32 %171, %164
  %337 = shl nuw nsw i32 %336, 3
  %338 = or disjoint i32 %337, %324
  %339 = zext nneg i32 %338 to i64
  %340 = xor i32 %165, %164
  %341 = shl nuw nsw i32 %166, 9
  %342 = shl nuw nsw i32 %164, 6
  %343 = or disjoint i32 %341, %342
  %344 = shl nuw nsw i32 %340, 3
  %345 = or disjoint i32 %344, %343
  %346 = zext nneg i32 %345 to i64
  %347 = xor i32 %172, %164
  %348 = shl nuw nsw i32 %347, 3
  %349 = or disjoint i32 %348, %343
  %350 = zext nneg i32 %349 to i64
  %351 = xor i32 %173, %164
  %352 = shl nuw nsw i32 %351, 3
  %353 = or disjoint i32 %352, %343
  %354 = zext nneg i32 %353 to i64
  %355 = xor i32 %174, %164
  %356 = shl nuw nsw i32 %355, 3
  %357 = or disjoint i32 %356, %343
  %358 = zext nneg i32 %357 to i64
  %359 = xor i32 %166, %164
  %urem = shl i32 %12, 6
  %360 = and i32 %urem, 960
  %361 = shl nuw nsw i32 %359, 3
  %362 = or disjoint i32 %361, %360
  %363 = zext nneg i32 %362 to i64
  %364 = xor i32 %169, %164
  %365 = shl nuw nsw i32 %364, 3
  %366 = or disjoint i32 %365, %360
  %367 = zext nneg i32 %366 to i64
  %368 = xor i32 %170, %164
  %369 = shl nuw nsw i32 %368, 3
  %370 = or disjoint i32 %369, %360
  %371 = zext nneg i32 %370 to i64
  %372 = xor i32 %171, %164
  %373 = shl nuw nsw i32 %372, 3
  %374 = or disjoint i32 %373, %360
  %375 = zext nneg i32 %374 to i64
  br label %376, !dbg !42

376:                                              ; preds = %5, %__nv_exp2f.exit196
  %377 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), %5 ], [ %2088, %__nv_exp2f.exit196 ]
  %378 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), %5 ], [ %2087, %__nv_exp2f.exit196 ]
  %379 = phi ptr addrspace(3) [ @global_smem, %5 ], [ %2084, %__nv_exp2f.exit196 ]
  %380 = phi i32 [ 0, %5 ], [ %2081, %__nv_exp2f.exit196 ]
  %381 = phi i32 [ 1, %5 ], [ %2039, %__nv_exp2f.exit196 ]
  %382 = phi float [ 0.000000e+00, %5 ], [ %1823, %__nv_exp2f.exit196 ]
  %383 = phi float [ 0.000000e+00, %5 ], [ %1824, %__nv_exp2f.exit196 ]
  %384 = phi float [ 0.000000e+00, %5 ], [ %1825, %__nv_exp2f.exit196 ]
  %385 = phi float [ 0.000000e+00, %5 ], [ %1826, %__nv_exp2f.exit196 ]
  %386 = phi float [ 0.000000e+00, %5 ], [ %1828, %__nv_exp2f.exit196 ]
  %387 = phi float [ 0.000000e+00, %5 ], [ %1829, %__nv_exp2f.exit196 ]
  %388 = phi float [ 0.000000e+00, %5 ], [ %1830, %__nv_exp2f.exit196 ]
  %389 = phi float [ 0.000000e+00, %5 ], [ %1831, %__nv_exp2f.exit196 ]
  %390 = phi float [ 0.000000e+00, %5 ], [ %1833, %__nv_exp2f.exit196 ]
  %391 = phi float [ 0.000000e+00, %5 ], [ %1834, %__nv_exp2f.exit196 ]
  %392 = phi float [ 0.000000e+00, %5 ], [ %1835, %__nv_exp2f.exit196 ]
  %393 = phi float [ 0.000000e+00, %5 ], [ %1836, %__nv_exp2f.exit196 ]
  %394 = phi float [ 0.000000e+00, %5 ], [ %1838, %__nv_exp2f.exit196 ]
  %395 = phi float [ 0.000000e+00, %5 ], [ %1839, %__nv_exp2f.exit196 ]
  %396 = phi float [ 0.000000e+00, %5 ], [ %1840, %__nv_exp2f.exit196 ]
  %397 = phi float [ 0.000000e+00, %5 ], [ %1841, %__nv_exp2f.exit196 ]
  %398 = phi float [ 0.000000e+00, %5 ], [ %1843, %__nv_exp2f.exit196 ]
  %399 = phi float [ 0.000000e+00, %5 ], [ %1844, %__nv_exp2f.exit196 ]
  %400 = phi float [ 0.000000e+00, %5 ], [ %1845, %__nv_exp2f.exit196 ]
  %401 = phi float [ 0.000000e+00, %5 ], [ %1846, %__nv_exp2f.exit196 ]
  %402 = phi float [ 0.000000e+00, %5 ], [ %1848, %__nv_exp2f.exit196 ]
  %403 = phi float [ 0.000000e+00, %5 ], [ %1849, %__nv_exp2f.exit196 ]
  %404 = phi float [ 0.000000e+00, %5 ], [ %1850, %__nv_exp2f.exit196 ]
  %405 = phi float [ 0.000000e+00, %5 ], [ %1851, %__nv_exp2f.exit196 ]
  %406 = phi float [ 0.000000e+00, %5 ], [ %1853, %__nv_exp2f.exit196 ]
  %407 = phi float [ 0.000000e+00, %5 ], [ %1854, %__nv_exp2f.exit196 ]
  %408 = phi float [ 0.000000e+00, %5 ], [ %1855, %__nv_exp2f.exit196 ]
  %409 = phi float [ 0.000000e+00, %5 ], [ %1856, %__nv_exp2f.exit196 ]
  %410 = phi float [ 0.000000e+00, %5 ], [ %1858, %__nv_exp2f.exit196 ]
  %411 = phi float [ 0.000000e+00, %5 ], [ %1859, %__nv_exp2f.exit196 ]
  %412 = phi float [ 0.000000e+00, %5 ], [ %1860, %__nv_exp2f.exit196 ]
  %413 = phi float [ 0.000000e+00, %5 ], [ %1861, %__nv_exp2f.exit196 ]
  %414 = phi float [ 0.000000e+00, %5 ], [ %1863, %__nv_exp2f.exit196 ]
  %415 = phi float [ 0.000000e+00, %5 ], [ %1864, %__nv_exp2f.exit196 ]
  %416 = phi float [ 0.000000e+00, %5 ], [ %1865, %__nv_exp2f.exit196 ]
  %417 = phi float [ 0.000000e+00, %5 ], [ %1866, %__nv_exp2f.exit196 ]
  %418 = phi float [ 0.000000e+00, %5 ], [ %1868, %__nv_exp2f.exit196 ]
  %419 = phi float [ 0.000000e+00, %5 ], [ %1869, %__nv_exp2f.exit196 ]
  %420 = phi float [ 0.000000e+00, %5 ], [ %1870, %__nv_exp2f.exit196 ]
  %421 = phi float [ 0.000000e+00, %5 ], [ %1871, %__nv_exp2f.exit196 ]
  %422 = phi float [ 0.000000e+00, %5 ], [ %1873, %__nv_exp2f.exit196 ]
  %423 = phi float [ 0.000000e+00, %5 ], [ %1874, %__nv_exp2f.exit196 ]
  %424 = phi float [ 0.000000e+00, %5 ], [ %1875, %__nv_exp2f.exit196 ]
  %425 = phi float [ 0.000000e+00, %5 ], [ %1876, %__nv_exp2f.exit196 ]
  %426 = phi float [ 0.000000e+00, %5 ], [ %1878, %__nv_exp2f.exit196 ]
  %427 = phi float [ 0.000000e+00, %5 ], [ %1879, %__nv_exp2f.exit196 ]
  %428 = phi float [ 0.000000e+00, %5 ], [ %1880, %__nv_exp2f.exit196 ]
  %429 = phi float [ 0.000000e+00, %5 ], [ %1881, %__nv_exp2f.exit196 ]
  %430 = phi float [ 0.000000e+00, %5 ], [ %1883, %__nv_exp2f.exit196 ]
  %431 = phi float [ 0.000000e+00, %5 ], [ %1884, %__nv_exp2f.exit196 ]
  %432 = phi float [ 0.000000e+00, %5 ], [ %1885, %__nv_exp2f.exit196 ]
  %433 = phi float [ 0.000000e+00, %5 ], [ %1886, %__nv_exp2f.exit196 ]
  %434 = phi float [ 0.000000e+00, %5 ], [ %1888, %__nv_exp2f.exit196 ]
  %435 = phi float [ 0.000000e+00, %5 ], [ %1889, %__nv_exp2f.exit196 ]
  %436 = phi float [ 0.000000e+00, %5 ], [ %1890, %__nv_exp2f.exit196 ]
  %437 = phi float [ 0.000000e+00, %5 ], [ %1891, %__nv_exp2f.exit196 ]
  %438 = phi float [ 0.000000e+00, %5 ], [ %1893, %__nv_exp2f.exit196 ]
  %439 = phi float [ 0.000000e+00, %5 ], [ %1894, %__nv_exp2f.exit196 ]
  %440 = phi float [ 0.000000e+00, %5 ], [ %1895, %__nv_exp2f.exit196 ]
  %441 = phi float [ 0.000000e+00, %5 ], [ %1896, %__nv_exp2f.exit196 ]
  %442 = phi float [ 0.000000e+00, %5 ], [ %1898, %__nv_exp2f.exit196 ]
  %443 = phi float [ 0.000000e+00, %5 ], [ %1899, %__nv_exp2f.exit196 ]
  %444 = phi float [ 0.000000e+00, %5 ], [ %1900, %__nv_exp2f.exit196 ]
  %445 = phi float [ 0.000000e+00, %5 ], [ %1901, %__nv_exp2f.exit196 ]
  %446 = phi i32 [ 0, %5 ], [ %2089, %__nv_exp2f.exit196 ]
  %447 = phi <8 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, %5 ], [ %1044, %__nv_exp2f.exit196 ]
  %448 = phi <32 x float> [ zeroinitializer, %5 ], [ %2036, %__nv_exp2f.exit196 ]
  %449 = icmp ult i32 %446, 448, !dbg !42
  %450 = or disjoint i32 %446, %49, !dbg !43
  %451 = or disjoint i32 %450, 1, !dbg !43
  %452 = or disjoint i32 %450, 8, !dbg !43
  %453 = or disjoint i32 %450, 9, !dbg !43
  %454 = or disjoint i32 %450, 16, !dbg !43
  %455 = or disjoint i32 %450, 17, !dbg !43
  %456 = or disjoint i32 %450, 24, !dbg !43
  %457 = or disjoint i32 %450, 25, !dbg !43
  %458 = getelementptr i16, ptr addrspace(3) %379, i64 %327, !dbg !35
  %459 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %458) #5, !dbg !35
  %460 = extractvalue { i32, i32, i32, i32 } %459, 0, !dbg !35
  %461 = extractvalue { i32, i32, i32, i32 } %459, 1, !dbg !35
  %462 = extractvalue { i32, i32, i32, i32 } %459, 2, !dbg !35
  %463 = extractvalue { i32, i32, i32, i32 } %459, 3, !dbg !35
  %464 = getelementptr i16, ptr addrspace(3) %379, i64 %331, !dbg !35
  %465 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %464) #5, !dbg !35
  %466 = extractvalue { i32, i32, i32, i32 } %465, 0, !dbg !35
  %467 = extractvalue { i32, i32, i32, i32 } %465, 1, !dbg !35
  %468 = extractvalue { i32, i32, i32, i32 } %465, 2, !dbg !35
  %469 = extractvalue { i32, i32, i32, i32 } %465, 3, !dbg !35
  %470 = getelementptr i16, ptr addrspace(3) %379, i64 %335, !dbg !35
  %471 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %470) #5, !dbg !35
  %472 = extractvalue { i32, i32, i32, i32 } %471, 0, !dbg !35
  %473 = extractvalue { i32, i32, i32, i32 } %471, 1, !dbg !35
  %474 = extractvalue { i32, i32, i32, i32 } %471, 2, !dbg !35
  %475 = extractvalue { i32, i32, i32, i32 } %471, 3, !dbg !35
  %476 = getelementptr i16, ptr addrspace(3) %379, i64 %339, !dbg !35
  %477 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %476) #5, !dbg !35
  %478 = extractvalue { i32, i32, i32, i32 } %477, 0, !dbg !35
  %479 = extractvalue { i32, i32, i32, i32 } %477, 1, !dbg !35
  %480 = extractvalue { i32, i32, i32, i32 } %477, 2, !dbg !35
  %481 = extractvalue { i32, i32, i32, i32 } %477, 3, !dbg !35
  %482 = getelementptr i8, ptr addrspace(3) %458, i64 8192, !dbg !35
  %483 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %482) #5, !dbg !35
  %484 = extractvalue { i32, i32, i32, i32 } %483, 0, !dbg !35
  %485 = extractvalue { i32, i32, i32, i32 } %483, 1, !dbg !35
  %486 = extractvalue { i32, i32, i32, i32 } %483, 2, !dbg !35
  %487 = extractvalue { i32, i32, i32, i32 } %483, 3, !dbg !35
  %488 = getelementptr i8, ptr addrspace(3) %464, i64 8192, !dbg !35
  %489 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %488) #5, !dbg !35
  %490 = extractvalue { i32, i32, i32, i32 } %489, 0, !dbg !35
  %491 = extractvalue { i32, i32, i32, i32 } %489, 1, !dbg !35
  %492 = extractvalue { i32, i32, i32, i32 } %489, 2, !dbg !35
  %493 = extractvalue { i32, i32, i32, i32 } %489, 3, !dbg !35
  %494 = getelementptr i8, ptr addrspace(3) %470, i64 8192, !dbg !35
  %495 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %494) #5, !dbg !35
  %496 = extractvalue { i32, i32, i32, i32 } %495, 0, !dbg !35
  %497 = extractvalue { i32, i32, i32, i32 } %495, 1, !dbg !35
  %498 = extractvalue { i32, i32, i32, i32 } %495, 2, !dbg !35
  %499 = extractvalue { i32, i32, i32, i32 } %495, 3, !dbg !35
  %500 = getelementptr i8, ptr addrspace(3) %476, i64 8192, !dbg !35
  %501 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %500) #5, !dbg !35
  %502 = extractvalue { i32, i32, i32, i32 } %501, 0, !dbg !35
  %503 = extractvalue { i32, i32, i32, i32 } %501, 1, !dbg !35
  %504 = extractvalue { i32, i32, i32, i32 } %501, 2, !dbg !35
  %505 = extractvalue { i32, i32, i32, i32 } %501, 3, !dbg !35
  %506 = getelementptr i16, ptr addrspace(3) %378, i64 %346, !dbg !39
  %507 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %506) #5, !dbg !39
  %508 = extractvalue { i32, i32, i32, i32 } %507, 0, !dbg !39
  %509 = extractvalue { i32, i32, i32, i32 } %507, 1, !dbg !39
  %510 = extractvalue { i32, i32, i32, i32 } %507, 2, !dbg !39
  %511 = extractvalue { i32, i32, i32, i32 } %507, 3, !dbg !39
  %512 = getelementptr i16, ptr addrspace(3) %378, i64 %350, !dbg !39
  %513 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %512) #5, !dbg !39
  %514 = extractvalue { i32, i32, i32, i32 } %513, 0, !dbg !39
  %515 = extractvalue { i32, i32, i32, i32 } %513, 1, !dbg !39
  %516 = extractvalue { i32, i32, i32, i32 } %513, 2, !dbg !39
  %517 = extractvalue { i32, i32, i32, i32 } %513, 3, !dbg !39
  %518 = getelementptr i16, ptr addrspace(3) %378, i64 %354, !dbg !39
  %519 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %518) #5, !dbg !39
  %520 = extractvalue { i32, i32, i32, i32 } %519, 0, !dbg !39
  %521 = extractvalue { i32, i32, i32, i32 } %519, 1, !dbg !39
  %522 = extractvalue { i32, i32, i32, i32 } %519, 2, !dbg !39
  %523 = extractvalue { i32, i32, i32, i32 } %519, 3, !dbg !39
  %524 = getelementptr i16, ptr addrspace(3) %378, i64 %358, !dbg !39
  %525 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %524) #5, !dbg !39
  %526 = extractvalue { i32, i32, i32, i32 } %525, 0, !dbg !39
  %527 = extractvalue { i32, i32, i32, i32 } %525, 1, !dbg !39
  %528 = extractvalue { i32, i32, i32, i32 } %525, 2, !dbg !39
  %529 = extractvalue { i32, i32, i32, i32 } %525, 3, !dbg !39
  %530 = getelementptr i8, ptr addrspace(3) %506, i64 2048, !dbg !39
  %531 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %530) #5, !dbg !39
  %532 = extractvalue { i32, i32, i32, i32 } %531, 0, !dbg !39
  %533 = extractvalue { i32, i32, i32, i32 } %531, 1, !dbg !39
  %534 = extractvalue { i32, i32, i32, i32 } %531, 2, !dbg !39
  %535 = extractvalue { i32, i32, i32, i32 } %531, 3, !dbg !39
  %536 = getelementptr i8, ptr addrspace(3) %512, i64 2048, !dbg !39
  %537 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %536) #5, !dbg !39
  %538 = extractvalue { i32, i32, i32, i32 } %537, 0, !dbg !39
  %539 = extractvalue { i32, i32, i32, i32 } %537, 1, !dbg !39
  %540 = extractvalue { i32, i32, i32, i32 } %537, 2, !dbg !39
  %541 = extractvalue { i32, i32, i32, i32 } %537, 3, !dbg !39
  %542 = getelementptr i8, ptr addrspace(3) %518, i64 2048, !dbg !39
  %543 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %542) #5, !dbg !39
  %544 = extractvalue { i32, i32, i32, i32 } %543, 0, !dbg !39
  %545 = extractvalue { i32, i32, i32, i32 } %543, 1, !dbg !39
  %546 = extractvalue { i32, i32, i32, i32 } %543, 2, !dbg !39
  %547 = extractvalue { i32, i32, i32, i32 } %543, 3, !dbg !39
  %548 = getelementptr i8, ptr addrspace(3) %524, i64 2048, !dbg !39
  %549 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %548) #5, !dbg !39
  %550 = extractvalue { i32, i32, i32, i32 } %549, 0, !dbg !39
  %551 = extractvalue { i32, i32, i32, i32 } %549, 1, !dbg !39
  %552 = extractvalue { i32, i32, i32, i32 } %549, 2, !dbg !39
  %553 = extractvalue { i32, i32, i32, i32 } %549, 3, !dbg !39
  %554 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %460, i32 %461, i32 %462, i32 %463, i32 %508, i32 %509) #5, !dbg !44
  %555 = extractvalue { float, float, float, float } %554, 0, !dbg !44
  %556 = extractvalue { float, float, float, float } %554, 1, !dbg !44
  %557 = extractvalue { float, float, float, float } %554, 2, !dbg !44
  %558 = extractvalue { float, float, float, float } %554, 3, !dbg !44
  %559 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %460, i32 %461, i32 %462, i32 %463, i32 %510, i32 %511) #5, !dbg !44
  %560 = extractvalue { float, float, float, float } %559, 0, !dbg !44
  %561 = extractvalue { float, float, float, float } %559, 1, !dbg !44
  %562 = extractvalue { float, float, float, float } %559, 2, !dbg !44
  %563 = extractvalue { float, float, float, float } %559, 3, !dbg !44
  %564 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %460, i32 %461, i32 %462, i32 %463, i32 %532, i32 %533) #5, !dbg !44
  %565 = extractvalue { float, float, float, float } %564, 0, !dbg !44
  %566 = extractvalue { float, float, float, float } %564, 1, !dbg !44
  %567 = extractvalue { float, float, float, float } %564, 2, !dbg !44
  %568 = extractvalue { float, float, float, float } %564, 3, !dbg !44
  %569 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %460, i32 %461, i32 %462, i32 %463, i32 %534, i32 %535) #5, !dbg !44
  %570 = extractvalue { float, float, float, float } %569, 0, !dbg !44
  %571 = extractvalue { float, float, float, float } %569, 1, !dbg !44
  %572 = extractvalue { float, float, float, float } %569, 2, !dbg !44
  %573 = extractvalue { float, float, float, float } %569, 3, !dbg !44
  %574 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %484, i32 %485, i32 %486, i32 %487, i32 %508, i32 %509) #5, !dbg !44
  %575 = extractvalue { float, float, float, float } %574, 0, !dbg !44
  %576 = extractvalue { float, float, float, float } %574, 1, !dbg !44
  %577 = extractvalue { float, float, float, float } %574, 2, !dbg !44
  %578 = extractvalue { float, float, float, float } %574, 3, !dbg !44
  %579 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %484, i32 %485, i32 %486, i32 %487, i32 %510, i32 %511) #5, !dbg !44
  %580 = extractvalue { float, float, float, float } %579, 0, !dbg !44
  %581 = extractvalue { float, float, float, float } %579, 1, !dbg !44
  %582 = extractvalue { float, float, float, float } %579, 2, !dbg !44
  %583 = extractvalue { float, float, float, float } %579, 3, !dbg !44
  %584 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %484, i32 %485, i32 %486, i32 %487, i32 %532, i32 %533) #5, !dbg !44
  %585 = extractvalue { float, float, float, float } %584, 0, !dbg !44
  %586 = extractvalue { float, float, float, float } %584, 1, !dbg !44
  %587 = extractvalue { float, float, float, float } %584, 2, !dbg !44
  %588 = extractvalue { float, float, float, float } %584, 3, !dbg !44
  %589 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %484, i32 %485, i32 %486, i32 %487, i32 %534, i32 %535) #5, !dbg !44
  %590 = extractvalue { float, float, float, float } %589, 0, !dbg !44
  %591 = extractvalue { float, float, float, float } %589, 1, !dbg !44
  %592 = extractvalue { float, float, float, float } %589, 2, !dbg !44
  %593 = extractvalue { float, float, float, float } %589, 3, !dbg !44
  %594 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %555, float %556, float %557, float %558, i32 %466, i32 %467, i32 %468, i32 %469, i32 %514, i32 %515) #5, !dbg !44
  %595 = extractvalue { float, float, float, float } %594, 0, !dbg !44
  %596 = extractvalue { float, float, float, float } %594, 1, !dbg !44
  %597 = extractvalue { float, float, float, float } %594, 2, !dbg !44
  %598 = extractvalue { float, float, float, float } %594, 3, !dbg !44
  %599 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %560, float %561, float %562, float %563, i32 %466, i32 %467, i32 %468, i32 %469, i32 %516, i32 %517) #5, !dbg !44
  %600 = extractvalue { float, float, float, float } %599, 0, !dbg !44
  %601 = extractvalue { float, float, float, float } %599, 1, !dbg !44
  %602 = extractvalue { float, float, float, float } %599, 2, !dbg !44
  %603 = extractvalue { float, float, float, float } %599, 3, !dbg !44
  %604 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %565, float %566, float %567, float %568, i32 %466, i32 %467, i32 %468, i32 %469, i32 %538, i32 %539) #5, !dbg !44
  %605 = extractvalue { float, float, float, float } %604, 0, !dbg !44
  %606 = extractvalue { float, float, float, float } %604, 1, !dbg !44
  %607 = extractvalue { float, float, float, float } %604, 2, !dbg !44
  %608 = extractvalue { float, float, float, float } %604, 3, !dbg !44
  %609 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %570, float %571, float %572, float %573, i32 %466, i32 %467, i32 %468, i32 %469, i32 %540, i32 %541) #5, !dbg !44
  %610 = extractvalue { float, float, float, float } %609, 0, !dbg !44
  %611 = extractvalue { float, float, float, float } %609, 1, !dbg !44
  %612 = extractvalue { float, float, float, float } %609, 2, !dbg !44
  %613 = extractvalue { float, float, float, float } %609, 3, !dbg !44
  %614 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %575, float %576, float %577, float %578, i32 %490, i32 %491, i32 %492, i32 %493, i32 %514, i32 %515) #5, !dbg !44
  %615 = extractvalue { float, float, float, float } %614, 0, !dbg !44
  %616 = extractvalue { float, float, float, float } %614, 1, !dbg !44
  %617 = extractvalue { float, float, float, float } %614, 2, !dbg !44
  %618 = extractvalue { float, float, float, float } %614, 3, !dbg !44
  %619 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %580, float %581, float %582, float %583, i32 %490, i32 %491, i32 %492, i32 %493, i32 %516, i32 %517) #5, !dbg !44
  %620 = extractvalue { float, float, float, float } %619, 0, !dbg !44
  %621 = extractvalue { float, float, float, float } %619, 1, !dbg !44
  %622 = extractvalue { float, float, float, float } %619, 2, !dbg !44
  %623 = extractvalue { float, float, float, float } %619, 3, !dbg !44
  %624 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %585, float %586, float %587, float %588, i32 %490, i32 %491, i32 %492, i32 %493, i32 %538, i32 %539) #5, !dbg !44
  %625 = extractvalue { float, float, float, float } %624, 0, !dbg !44
  %626 = extractvalue { float, float, float, float } %624, 1, !dbg !44
  %627 = extractvalue { float, float, float, float } %624, 2, !dbg !44
  %628 = extractvalue { float, float, float, float } %624, 3, !dbg !44
  %629 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %590, float %591, float %592, float %593, i32 %490, i32 %491, i32 %492, i32 %493, i32 %540, i32 %541) #5, !dbg !44
  %630 = extractvalue { float, float, float, float } %629, 0, !dbg !44
  %631 = extractvalue { float, float, float, float } %629, 1, !dbg !44
  %632 = extractvalue { float, float, float, float } %629, 2, !dbg !44
  %633 = extractvalue { float, float, float, float } %629, 3, !dbg !44
  %634 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %595, float %596, float %597, float %598, i32 %472, i32 %473, i32 %474, i32 %475, i32 %520, i32 %521) #5, !dbg !44
  %635 = extractvalue { float, float, float, float } %634, 0, !dbg !44
  %636 = extractvalue { float, float, float, float } %634, 1, !dbg !44
  %637 = extractvalue { float, float, float, float } %634, 2, !dbg !44
  %638 = extractvalue { float, float, float, float } %634, 3, !dbg !44
  %639 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %600, float %601, float %602, float %603, i32 %472, i32 %473, i32 %474, i32 %475, i32 %522, i32 %523) #5, !dbg !44
  %640 = extractvalue { float, float, float, float } %639, 0, !dbg !44
  %641 = extractvalue { float, float, float, float } %639, 1, !dbg !44
  %642 = extractvalue { float, float, float, float } %639, 2, !dbg !44
  %643 = extractvalue { float, float, float, float } %639, 3, !dbg !44
  %644 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %605, float %606, float %607, float %608, i32 %472, i32 %473, i32 %474, i32 %475, i32 %544, i32 %545) #5, !dbg !44
  %645 = extractvalue { float, float, float, float } %644, 0, !dbg !44
  %646 = extractvalue { float, float, float, float } %644, 1, !dbg !44
  %647 = extractvalue { float, float, float, float } %644, 2, !dbg !44
  %648 = extractvalue { float, float, float, float } %644, 3, !dbg !44
  %649 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %610, float %611, float %612, float %613, i32 %472, i32 %473, i32 %474, i32 %475, i32 %546, i32 %547) #5, !dbg !44
  %650 = extractvalue { float, float, float, float } %649, 0, !dbg !44
  %651 = extractvalue { float, float, float, float } %649, 1, !dbg !44
  %652 = extractvalue { float, float, float, float } %649, 2, !dbg !44
  %653 = extractvalue { float, float, float, float } %649, 3, !dbg !44
  %654 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %615, float %616, float %617, float %618, i32 %496, i32 %497, i32 %498, i32 %499, i32 %520, i32 %521) #5, !dbg !44
  %655 = extractvalue { float, float, float, float } %654, 0, !dbg !44
  %656 = extractvalue { float, float, float, float } %654, 1, !dbg !44
  %657 = extractvalue { float, float, float, float } %654, 2, !dbg !44
  %658 = extractvalue { float, float, float, float } %654, 3, !dbg !44
  %659 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %620, float %621, float %622, float %623, i32 %496, i32 %497, i32 %498, i32 %499, i32 %522, i32 %523) #5, !dbg !44
  %660 = extractvalue { float, float, float, float } %659, 0, !dbg !44
  %661 = extractvalue { float, float, float, float } %659, 1, !dbg !44
  %662 = extractvalue { float, float, float, float } %659, 2, !dbg !44
  %663 = extractvalue { float, float, float, float } %659, 3, !dbg !44
  %664 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %625, float %626, float %627, float %628, i32 %496, i32 %497, i32 %498, i32 %499, i32 %544, i32 %545) #5, !dbg !44
  %665 = extractvalue { float, float, float, float } %664, 0, !dbg !44
  %666 = extractvalue { float, float, float, float } %664, 1, !dbg !44
  %667 = extractvalue { float, float, float, float } %664, 2, !dbg !44
  %668 = extractvalue { float, float, float, float } %664, 3, !dbg !44
  %669 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %630, float %631, float %632, float %633, i32 %496, i32 %497, i32 %498, i32 %499, i32 %546, i32 %547) #5, !dbg !44
  %670 = extractvalue { float, float, float, float } %669, 0, !dbg !44
  %671 = extractvalue { float, float, float, float } %669, 1, !dbg !44
  %672 = extractvalue { float, float, float, float } %669, 2, !dbg !44
  %673 = extractvalue { float, float, float, float } %669, 3, !dbg !44
  %674 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %635, float %636, float %637, float %638, i32 %478, i32 %479, i32 %480, i32 %481, i32 %526, i32 %527) #5, !dbg !44
  %675 = extractvalue { float, float, float, float } %674, 0, !dbg !44
  %676 = extractvalue { float, float, float, float } %674, 1, !dbg !44
  %677 = extractvalue { float, float, float, float } %674, 2, !dbg !44
  %678 = extractvalue { float, float, float, float } %674, 3, !dbg !44
  %679 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %640, float %641, float %642, float %643, i32 %478, i32 %479, i32 %480, i32 %481, i32 %528, i32 %529) #5, !dbg !44
  %680 = extractvalue { float, float, float, float } %679, 0, !dbg !44
  %681 = extractvalue { float, float, float, float } %679, 1, !dbg !44
  %682 = extractvalue { float, float, float, float } %679, 2, !dbg !44
  %683 = extractvalue { float, float, float, float } %679, 3, !dbg !44
  %684 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %645, float %646, float %647, float %648, i32 %478, i32 %479, i32 %480, i32 %481, i32 %550, i32 %551) #5, !dbg !44
  %685 = extractvalue { float, float, float, float } %684, 0, !dbg !44
  %686 = extractvalue { float, float, float, float } %684, 1, !dbg !44
  %687 = extractvalue { float, float, float, float } %684, 2, !dbg !44
  %688 = extractvalue { float, float, float, float } %684, 3, !dbg !44
  %689 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %650, float %651, float %652, float %653, i32 %478, i32 %479, i32 %480, i32 %481, i32 %552, i32 %553) #5, !dbg !44
  %690 = extractvalue { float, float, float, float } %689, 0, !dbg !44
  %691 = extractvalue { float, float, float, float } %689, 1, !dbg !44
  %692 = extractvalue { float, float, float, float } %689, 2, !dbg !44
  %693 = extractvalue { float, float, float, float } %689, 3, !dbg !44
  %694 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %655, float %656, float %657, float %658, i32 %502, i32 %503, i32 %504, i32 %505, i32 %526, i32 %527) #5, !dbg !44
  %695 = extractvalue { float, float, float, float } %694, 0, !dbg !44
  %696 = extractvalue { float, float, float, float } %694, 1, !dbg !44
  %697 = extractvalue { float, float, float, float } %694, 2, !dbg !44
  %698 = extractvalue { float, float, float, float } %694, 3, !dbg !44
  %699 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %660, float %661, float %662, float %663, i32 %502, i32 %503, i32 %504, i32 %505, i32 %528, i32 %529) #5, !dbg !44
  %700 = extractvalue { float, float, float, float } %699, 0, !dbg !44
  %701 = extractvalue { float, float, float, float } %699, 1, !dbg !44
  %702 = extractvalue { float, float, float, float } %699, 2, !dbg !44
  %703 = extractvalue { float, float, float, float } %699, 3, !dbg !44
  %704 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %665, float %666, float %667, float %668, i32 %502, i32 %503, i32 %504, i32 %505, i32 %550, i32 %551) #5, !dbg !44
  %705 = extractvalue { float, float, float, float } %704, 0, !dbg !44
  %706 = extractvalue { float, float, float, float } %704, 1, !dbg !44
  %707 = extractvalue { float, float, float, float } %704, 2, !dbg !44
  %708 = extractvalue { float, float, float, float } %704, 3, !dbg !44
  %709 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %670, float %671, float %672, float %673, i32 %502, i32 %503, i32 %504, i32 %505, i32 %552, i32 %553) #5, !dbg !44
  %710 = extractvalue { float, float, float, float } %709, 0, !dbg !44
  %711 = extractvalue { float, float, float, float } %709, 1, !dbg !44
  %712 = extractvalue { float, float, float, float } %709, 2, !dbg !44
  %713 = extractvalue { float, float, float, float } %709, 3, !dbg !44
  %714 = fmul float %675, 1.250000e-01, !dbg !45
  %715 = fmul float %676, 1.250000e-01, !dbg !45
  %716 = fmul float %677, 1.250000e-01, !dbg !45
  %717 = fmul float %678, 1.250000e-01, !dbg !45
  %718 = fmul float %680, 1.250000e-01, !dbg !45
  %719 = fmul float %681, 1.250000e-01, !dbg !45
  %720 = fmul float %682, 1.250000e-01, !dbg !45
  %721 = fmul float %683, 1.250000e-01, !dbg !45
  %722 = fmul float %685, 1.250000e-01, !dbg !45
  %723 = fmul float %686, 1.250000e-01, !dbg !45
  %724 = fmul float %687, 1.250000e-01, !dbg !45
  %725 = fmul float %688, 1.250000e-01, !dbg !45
  %726 = fmul float %690, 1.250000e-01, !dbg !45
  %727 = fmul float %691, 1.250000e-01, !dbg !45
  %728 = fmul float %692, 1.250000e-01, !dbg !45
  %729 = fmul float %693, 1.250000e-01, !dbg !45
  %730 = fmul float %695, 1.250000e-01, !dbg !45
  %731 = fmul float %696, 1.250000e-01, !dbg !45
  %732 = fmul float %697, 1.250000e-01, !dbg !45
  %733 = fmul float %698, 1.250000e-01, !dbg !45
  %734 = fmul float %700, 1.250000e-01, !dbg !45
  %735 = fmul float %701, 1.250000e-01, !dbg !45
  %736 = fmul float %702, 1.250000e-01, !dbg !45
  %737 = fmul float %703, 1.250000e-01, !dbg !45
  %738 = fmul float %705, 1.250000e-01, !dbg !45
  %739 = fmul float %706, 1.250000e-01, !dbg !45
  %740 = fmul float %707, 1.250000e-01, !dbg !45
  %741 = fmul float %708, 1.250000e-01, !dbg !45
  %742 = fmul float %710, 1.250000e-01, !dbg !45
  %743 = fmul float %711, 1.250000e-01, !dbg !45
  %744 = fmul float %712, 1.250000e-01, !dbg !45
  %745 = fmul float %713, 1.250000e-01, !dbg !45
  %746 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i = icmp eq i32 %746, 0, !dbg !46
  br i1 %.not.i, label %749, label %747, !dbg !46

747:                                              ; preds = %376
  %748 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %88) #5, !dbg !46
  br label %__nv_exp2f.exit, !dbg !46

749:                                              ; preds = %376
  %750 = tail call float @llvm.nvvm.ex2.approx.f(float %88) #5, !dbg !46
  br label %__nv_exp2f.exit, !dbg !46

__nv_exp2f.exit:                                  ; preds = %747, %749
  %.0.i = phi float [ %748, %747 ], [ %750, %749 ], !dbg !46
  %751 = sub nsw i32 %450, %42, !dbg !47
  %752 = sub nsw i32 %451, %42, !dbg !47
  %753 = sub i32 %450, %43, !dbg !47
  %754 = sub i32 %451, %43, !dbg !47
  %755 = sub nsw i32 %452, %42, !dbg !47
  %756 = sub nsw i32 %453, %42, !dbg !47
  %757 = sub i32 %452, %43, !dbg !47
  %758 = sub i32 %453, %43, !dbg !47
  %759 = sub nsw i32 %454, %42, !dbg !47
  %760 = sub nsw i32 %455, %42, !dbg !47
  %761 = sub i32 %454, %43, !dbg !47
  %762 = sub i32 %455, %43, !dbg !47
  %763 = sub nsw i32 %456, %42, !dbg !47
  %764 = sub nsw i32 %457, %42, !dbg !47
  %765 = sub i32 %456, %43, !dbg !47
  %766 = sub i32 %457, %43, !dbg !47
  %767 = sub i32 %450, %44, !dbg !47
  %768 = sub i32 %451, %44, !dbg !47
  %769 = sub i32 %450, %45, !dbg !47
  %770 = sub i32 %451, %45, !dbg !47
  %771 = sub i32 %452, %44, !dbg !47
  %772 = sub i32 %453, %44, !dbg !47
  %773 = sub i32 %452, %45, !dbg !47
  %774 = sub i32 %453, %45, !dbg !47
  %775 = sub i32 %454, %44, !dbg !47
  %776 = sub i32 %455, %44, !dbg !47
  %777 = sub i32 %454, %45, !dbg !47
  %778 = sub i32 %455, %45, !dbg !47
  %779 = sub i32 %456, %44, !dbg !47
  %780 = sub i32 %457, %44, !dbg !47
  %781 = sub i32 %456, %45, !dbg !47
  %782 = sub i32 %457, %45, !dbg !47
  %783 = sitofp i32 %751 to float, !dbg !48
  %784 = sitofp i32 %752 to float, !dbg !48
  %785 = sitofp i32 %753 to float, !dbg !48
  %786 = sitofp i32 %754 to float, !dbg !48
  %787 = sitofp i32 %755 to float, !dbg !48
  %788 = sitofp i32 %756 to float, !dbg !48
  %789 = sitofp i32 %757 to float, !dbg !48
  %790 = sitofp i32 %758 to float, !dbg !48
  %791 = sitofp i32 %759 to float, !dbg !48
  %792 = sitofp i32 %760 to float, !dbg !48
  %793 = sitofp i32 %761 to float, !dbg !48
  %794 = sitofp i32 %762 to float, !dbg !48
  %795 = sitofp i32 %763 to float, !dbg !48
  %796 = sitofp i32 %764 to float, !dbg !48
  %797 = sitofp i32 %765 to float, !dbg !48
  %798 = sitofp i32 %766 to float, !dbg !48
  %799 = sitofp i32 %767 to float, !dbg !48
  %800 = sitofp i32 %768 to float, !dbg !48
  %801 = sitofp i32 %769 to float, !dbg !48
  %802 = sitofp i32 %770 to float, !dbg !48
  %803 = sitofp i32 %771 to float, !dbg !48
  %804 = sitofp i32 %772 to float, !dbg !48
  %805 = sitofp i32 %773 to float, !dbg !48
  %806 = sitofp i32 %774 to float, !dbg !48
  %807 = sitofp i32 %775 to float, !dbg !48
  %808 = sitofp i32 %776 to float, !dbg !48
  %809 = sitofp i32 %777 to float, !dbg !48
  %810 = sitofp i32 %778 to float, !dbg !48
  %811 = sitofp i32 %779 to float, !dbg !48
  %812 = sitofp i32 %780 to float, !dbg !48
  %813 = sitofp i32 %781 to float, !dbg !48
  %814 = sitofp i32 %782 to float, !dbg !48
  %815 = fmul float %.0.i, %783, !dbg !49
  %816 = fmul float %.0.i, %784, !dbg !49
  %817 = fmul float %.0.i, %785, !dbg !49
  %818 = fmul float %.0.i, %786, !dbg !49
  %819 = fmul float %.0.i, %787, !dbg !49
  %820 = fmul float %.0.i, %788, !dbg !49
  %821 = fmul float %.0.i, %789, !dbg !49
  %822 = fmul float %.0.i, %790, !dbg !49
  %823 = fmul float %.0.i, %791, !dbg !49
  %824 = fmul float %.0.i, %792, !dbg !49
  %825 = fmul float %.0.i, %793, !dbg !49
  %826 = fmul float %.0.i, %794, !dbg !49
  %827 = fmul float %.0.i, %795, !dbg !49
  %828 = fmul float %.0.i, %796, !dbg !49
  %829 = fmul float %.0.i, %797, !dbg !49
  %830 = fmul float %.0.i, %798, !dbg !49
  %831 = fmul float %.0.i, %799, !dbg !49
  %832 = fmul float %.0.i, %800, !dbg !49
  %833 = fmul float %.0.i, %801, !dbg !49
  %834 = fmul float %.0.i, %802, !dbg !49
  %835 = fmul float %.0.i, %803, !dbg !49
  %836 = fmul float %.0.i, %804, !dbg !49
  %837 = fmul float %.0.i, %805, !dbg !49
  %838 = fmul float %.0.i, %806, !dbg !49
  %839 = fmul float %.0.i, %807, !dbg !49
  %840 = fmul float %.0.i, %808, !dbg !49
  %841 = fmul float %.0.i, %809, !dbg !49
  %842 = fmul float %.0.i, %810, !dbg !49
  %843 = fmul float %.0.i, %811, !dbg !49
  %844 = fmul float %.0.i, %812, !dbg !49
  %845 = fmul float %.0.i, %813, !dbg !49
  %846 = fmul float %.0.i, %814, !dbg !49
  %847 = fadd float %714, %815, !dbg !50
  %848 = fadd float %715, %816, !dbg !50
  %849 = fadd float %716, %817, !dbg !50
  %850 = fadd float %717, %818, !dbg !50
  %851 = fadd float %718, %819, !dbg !50
  %852 = fadd float %719, %820, !dbg !50
  %853 = fadd float %720, %821, !dbg !50
  %854 = fadd float %721, %822, !dbg !50
  %855 = fadd float %722, %823, !dbg !50
  %856 = fadd float %723, %824, !dbg !50
  %857 = fadd float %724, %825, !dbg !50
  %858 = fadd float %725, %826, !dbg !50
  %859 = fadd float %726, %827, !dbg !50
  %860 = fadd float %727, %828, !dbg !50
  %861 = fadd float %728, %829, !dbg !50
  %862 = fadd float %729, %830, !dbg !50
  %863 = fadd float %730, %831, !dbg !50
  %864 = fadd float %731, %832, !dbg !50
  %865 = fadd float %732, %833, !dbg !50
  %866 = fadd float %733, %834, !dbg !50
  %867 = fadd float %734, %835, !dbg !50
  %868 = fadd float %735, %836, !dbg !50
  %869 = fadd float %736, %837, !dbg !50
  %870 = fadd float %737, %838, !dbg !50
  %871 = fadd float %738, %839, !dbg !50
  %872 = fadd float %739, %840, !dbg !50
  %873 = fadd float %740, %841, !dbg !50
  %874 = fadd float %741, %842, !dbg !50
  %875 = fadd float %742, %843, !dbg !50
  %876 = fadd float %743, %844, !dbg !50
  %877 = fadd float %744, %845, !dbg !50
  %878 = fadd float %745, %846, !dbg !50
  %879 = fcmp ogt float %847, %848, !dbg !51
  %880 = fcmp uno float %847, 0.000000e+00, !dbg !56
  %881 = or i1 %879, %880, !dbg !57
  %882 = select i1 %881, float %847, float %848, !dbg !58
  %883 = fcmp ogt float %849, %850, !dbg !51
  %884 = fcmp uno float %849, 0.000000e+00, !dbg !56
  %885 = or i1 %883, %884, !dbg !57
  %886 = select i1 %885, float %849, float %850, !dbg !58
  %887 = fcmp ogt float %882, %851, !dbg !51
  %888 = fcmp uno float %882, 0.000000e+00, !dbg !56
  %889 = or i1 %887, %888, !dbg !57
  %890 = select i1 %889, float %882, float %851, !dbg !58
  %891 = fcmp ogt float %890, %852, !dbg !51
  %892 = fcmp uno float %890, 0.000000e+00, !dbg !56
  %893 = or i1 %891, %892, !dbg !57
  %894 = select i1 %893, float %890, float %852, !dbg !58
  %895 = fcmp ogt float %886, %853, !dbg !51
  %896 = fcmp uno float %886, 0.000000e+00, !dbg !56
  %897 = or i1 %895, %896, !dbg !57
  %898 = select i1 %897, float %886, float %853, !dbg !58
  %899 = fcmp ogt float %898, %854, !dbg !51
  %900 = fcmp uno float %898, 0.000000e+00, !dbg !56
  %901 = or i1 %899, %900, !dbg !57
  %902 = select i1 %901, float %898, float %854, !dbg !58
  %903 = fcmp ogt float %894, %855, !dbg !51
  %904 = fcmp uno float %894, 0.000000e+00, !dbg !56
  %905 = or i1 %903, %904, !dbg !57
  %906 = select i1 %905, float %894, float %855, !dbg !58
  %907 = fcmp ogt float %906, %856, !dbg !51
  %908 = fcmp uno float %906, 0.000000e+00, !dbg !56
  %909 = or i1 %907, %908, !dbg !57
  %910 = select i1 %909, float %906, float %856, !dbg !58
  %911 = fcmp ogt float %902, %857, !dbg !51
  %912 = fcmp uno float %902, 0.000000e+00, !dbg !56
  %913 = or i1 %911, %912, !dbg !57
  %914 = select i1 %913, float %902, float %857, !dbg !58
  %915 = fcmp ogt float %914, %858, !dbg !51
  %916 = fcmp uno float %914, 0.000000e+00, !dbg !56
  %917 = or i1 %915, %916, !dbg !57
  %918 = select i1 %917, float %914, float %858, !dbg !58
  %919 = fcmp ogt float %910, %859, !dbg !51
  %920 = fcmp uno float %910, 0.000000e+00, !dbg !56
  %921 = or i1 %919, %920, !dbg !57
  %922 = select i1 %921, float %910, float %859, !dbg !58
  %923 = fcmp ogt float %922, %860, !dbg !51
  %924 = fcmp uno float %922, 0.000000e+00, !dbg !56
  %925 = or i1 %923, %924, !dbg !57
  %926 = select i1 %925, float %922, float %860, !dbg !58
  %927 = fcmp ogt float %918, %861, !dbg !51
  %928 = fcmp uno float %918, 0.000000e+00, !dbg !56
  %929 = or i1 %927, %928, !dbg !57
  %930 = select i1 %929, float %918, float %861, !dbg !58
  %931 = fcmp ogt float %930, %862, !dbg !51
  %932 = fcmp uno float %930, 0.000000e+00, !dbg !56
  %933 = or i1 %931, %932, !dbg !57
  %934 = select i1 %933, float %930, float %862, !dbg !58
  %935 = fcmp ogt float %863, %864, !dbg !51
  %936 = fcmp uno float %863, 0.000000e+00, !dbg !56
  %937 = or i1 %935, %936, !dbg !57
  %938 = select i1 %937, float %863, float %864, !dbg !58
  %939 = fcmp ogt float %865, %866, !dbg !51
  %940 = fcmp uno float %865, 0.000000e+00, !dbg !56
  %941 = or i1 %939, %940, !dbg !57
  %942 = select i1 %941, float %865, float %866, !dbg !58
  %943 = fcmp ogt float %938, %867, !dbg !51
  %944 = fcmp uno float %938, 0.000000e+00, !dbg !56
  %945 = or i1 %943, %944, !dbg !57
  %946 = select i1 %945, float %938, float %867, !dbg !58
  %947 = fcmp ogt float %946, %868, !dbg !51
  %948 = fcmp uno float %946, 0.000000e+00, !dbg !56
  %949 = or i1 %947, %948, !dbg !57
  %950 = select i1 %949, float %946, float %868, !dbg !58
  %951 = fcmp ogt float %942, %869, !dbg !51
  %952 = fcmp uno float %942, 0.000000e+00, !dbg !56
  %953 = or i1 %951, %952, !dbg !57
  %954 = select i1 %953, float %942, float %869, !dbg !58
  %955 = fcmp ogt float %954, %870, !dbg !51
  %956 = fcmp uno float %954, 0.000000e+00, !dbg !56
  %957 = or i1 %955, %956, !dbg !57
  %958 = select i1 %957, float %954, float %870, !dbg !58
  %959 = fcmp ogt float %950, %871, !dbg !51
  %960 = fcmp uno float %950, 0.000000e+00, !dbg !56
  %961 = or i1 %959, %960, !dbg !57
  %962 = select i1 %961, float %950, float %871, !dbg !58
  %963 = fcmp ogt float %962, %872, !dbg !51
  %964 = fcmp uno float %962, 0.000000e+00, !dbg !56
  %965 = or i1 %963, %964, !dbg !57
  %966 = select i1 %965, float %962, float %872, !dbg !58
  %967 = fcmp ogt float %958, %873, !dbg !51
  %968 = fcmp uno float %958, 0.000000e+00, !dbg !56
  %969 = or i1 %967, %968, !dbg !57
  %970 = select i1 %969, float %958, float %873, !dbg !58
  %971 = fcmp ogt float %970, %874, !dbg !51
  %972 = fcmp uno float %970, 0.000000e+00, !dbg !56
  %973 = or i1 %971, %972, !dbg !57
  %974 = select i1 %973, float %970, float %874, !dbg !58
  %975 = fcmp ogt float %966, %875, !dbg !51
  %976 = fcmp uno float %966, 0.000000e+00, !dbg !56
  %977 = or i1 %975, %976, !dbg !57
  %978 = select i1 %977, float %966, float %875, !dbg !58
  %979 = fcmp ogt float %978, %876, !dbg !51
  %980 = fcmp uno float %978, 0.000000e+00, !dbg !56
  %981 = or i1 %979, %980, !dbg !57
  %982 = select i1 %981, float %978, float %876, !dbg !58
  %983 = fcmp ogt float %974, %877, !dbg !51
  %984 = fcmp uno float %974, 0.000000e+00, !dbg !56
  %985 = or i1 %983, %984, !dbg !57
  %986 = select i1 %985, float %974, float %877, !dbg !58
  %987 = fcmp ogt float %986, %878, !dbg !51
  %988 = fcmp uno float %986, 0.000000e+00, !dbg !56
  %989 = or i1 %987, %988, !dbg !57
  %990 = select i1 %989, float %986, float %878, !dbg !58
  %991 = bitcast float %926 to i32, !dbg !59
  %992 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %991, i32 2, i32 31), !dbg !59
  %993 = bitcast i32 %992 to float, !dbg !59
  %994 = fcmp ogt float %926, %993, !dbg !51
  %995 = fcmp uno float %926, 0.000000e+00, !dbg !56
  %996 = or i1 %994, %995, !dbg !57
  %997 = bitcast float %934 to i32, !dbg !59
  %998 = fcmp uno float %934, 0.000000e+00, !dbg !56
  %999 = bitcast float %982 to i32, !dbg !59
  %1000 = fcmp uno float %982, 0.000000e+00, !dbg !56
  %1001 = bitcast float %990 to i32, !dbg !59
  %1002 = fcmp uno float %990, 0.000000e+00, !dbg !56
  %1003 = fcmp uno <8 x float> %447, zeroinitializer, !dbg !60
  %1004 = select i1 %996, float %926, float %993, !dbg !58
  %1005 = bitcast float %1004 to i32, !dbg !59
  %1006 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1005, i32 1, i32 31), !dbg !59
  %1007 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %997, i32 2, i32 31), !dbg !59
  %1008 = bitcast i32 %1007 to float, !dbg !59
  %1009 = fcmp ogt float %934, %1008, !dbg !51
  %1010 = or i1 %1009, %998, !dbg !57
  %1011 = select i1 %1010, float %934, float %1008, !dbg !58
  %1012 = bitcast float %1011 to i32, !dbg !59
  %1013 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1012, i32 1, i32 31), !dbg !59
  %1014 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %999, i32 2, i32 31), !dbg !59
  %1015 = bitcast i32 %1014 to float, !dbg !59
  %1016 = fcmp ogt float %982, %1015, !dbg !51
  %1017 = or i1 %1016, %1000, !dbg !57
  %1018 = select i1 %1017, float %982, float %1015, !dbg !58
  %1019 = bitcast float %1018 to i32, !dbg !59
  %1020 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1019, i32 1, i32 31), !dbg !59
  %1021 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1001, i32 2, i32 31), !dbg !59
  %1022 = bitcast i32 %1021 to float, !dbg !59
  %1023 = fcmp ogt float %990, %1022, !dbg !51
  %1024 = or i1 %1023, %1002, !dbg !57
  %1025 = select i1 %1024, float %990, float %1022, !dbg !58
  %1026 = bitcast float %1025 to i32, !dbg !59
  %1027 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1026, i32 1, i32 31), !dbg !59
  %1028 = insertelement <4 x i32> poison, i32 %1027, i64 0, !dbg !59
  %1029 = insertelement <4 x i32> %1028, i32 %1020, i64 1, !dbg !59
  %1030 = insertelement <4 x i32> %1029, i32 %1013, i64 2, !dbg !59
  %1031 = insertelement <4 x i32> %1030, i32 %1006, i64 3, !dbg !59
  %1032 = bitcast <4 x i32> %1031 to <4 x float>, !dbg !59
  %1033 = insertelement <4 x float> poison, float %1025, i64 0, !dbg !51
  %1034 = insertelement <4 x float> %1033, float %1018, i64 1, !dbg !51
  %1035 = insertelement <4 x float> %1034, float %1011, i64 2, !dbg !51
  %1036 = insertelement <4 x float> %1035, float %1004, i64 3, !dbg !51
  %1037 = fcmp ogt <4 x float> %1036, %1032, !dbg !51
  %1038 = fcmp uno <4 x float> %1036, zeroinitializer, !dbg !56
  %1039 = or <4 x i1> %1037, %1038, !dbg !57
  %1040 = select <4 x i1> %1039, <4 x float> %1036, <4 x float> %1032, !dbg !58
  %1041 = shufflevector <4 x float> %1040, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !58
  %1042 = fcmp ogt <8 x float> %447, %1041, !dbg !62
  %1043 = or <8 x i1> %1003, %1042, !dbg !63
  %1044 = select <8 x i1> %1043, <8 x float> %447, <8 x float> %1041, !dbg !64
  %1045 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !65
  %.not.i194 = icmp eq i32 %1045, 0, !dbg !65
  br i1 %.not.i194, label %1048, label %1046, !dbg !65

1046:                                             ; preds = %__nv_exp2f.exit
  %1047 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %93) #5, !dbg !65
  br label %__nv_exp2f.exit196, !dbg !65

1048:                                             ; preds = %__nv_exp2f.exit
  %1049 = tail call float @llvm.nvvm.ex2.approx.f(float %93) #5, !dbg !65
  br label %__nv_exp2f.exit196, !dbg !65

__nv_exp2f.exit196:                               ; preds = %1046, %1048
  %.0.i195 = phi float [ %1047, %1046 ], [ %1049, %1048 ], !dbg !65
  %1050 = fmul float %.0.i195, %783, !dbg !66
  %1051 = fmul float %.0.i195, %784, !dbg !66
  %1052 = fmul float %.0.i195, %785, !dbg !66
  %1053 = fmul float %.0.i195, %786, !dbg !66
  %1054 = fmul float %.0.i195, %787, !dbg !66
  %1055 = fmul float %.0.i195, %788, !dbg !66
  %1056 = fmul float %.0.i195, %789, !dbg !66
  %1057 = fmul float %.0.i195, %790, !dbg !66
  %1058 = fmul float %.0.i195, %791, !dbg !66
  %1059 = fmul float %.0.i195, %792, !dbg !66
  %1060 = fmul float %.0.i195, %793, !dbg !66
  %1061 = fmul float %.0.i195, %794, !dbg !66
  %1062 = fmul float %.0.i195, %795, !dbg !66
  %1063 = fmul float %.0.i195, %796, !dbg !66
  %1064 = fmul float %.0.i195, %797, !dbg !66
  %1065 = fmul float %.0.i195, %798, !dbg !66
  %1066 = fmul float %.0.i195, %799, !dbg !66
  %1067 = fmul float %.0.i195, %800, !dbg !66
  %1068 = fmul float %.0.i195, %801, !dbg !66
  %1069 = fmul float %.0.i195, %802, !dbg !66
  %1070 = fmul float %.0.i195, %803, !dbg !66
  %1071 = fmul float %.0.i195, %804, !dbg !66
  %1072 = fmul float %.0.i195, %805, !dbg !66
  %1073 = fmul float %.0.i195, %806, !dbg !66
  %1074 = fmul float %.0.i195, %807, !dbg !66
  %1075 = fmul float %.0.i195, %808, !dbg !66
  %1076 = fmul float %.0.i195, %809, !dbg !66
  %1077 = fmul float %.0.i195, %810, !dbg !66
  %1078 = fmul float %.0.i195, %811, !dbg !66
  %1079 = fmul float %.0.i195, %812, !dbg !66
  %1080 = fmul float %.0.i195, %813, !dbg !66
  %1081 = fmul float %.0.i195, %814, !dbg !66
  %1082 = fadd float %714, %1050, !dbg !67
  %1083 = fadd float %715, %1051, !dbg !67
  %1084 = fadd float %716, %1052, !dbg !67
  %1085 = fadd float %717, %1053, !dbg !67
  %1086 = fadd float %718, %1054, !dbg !67
  %1087 = fadd float %719, %1055, !dbg !67
  %1088 = fadd float %720, %1056, !dbg !67
  %1089 = fadd float %721, %1057, !dbg !67
  %1090 = fadd float %722, %1058, !dbg !67
  %1091 = fadd float %723, %1059, !dbg !67
  %1092 = fadd float %724, %1060, !dbg !67
  %1093 = fadd float %725, %1061, !dbg !67
  %1094 = fadd float %726, %1062, !dbg !67
  %1095 = fadd float %727, %1063, !dbg !67
  %1096 = fadd float %728, %1064, !dbg !67
  %1097 = fadd float %729, %1065, !dbg !67
  %1098 = fadd float %730, %1066, !dbg !67
  %1099 = fadd float %731, %1067, !dbg !67
  %1100 = fadd float %732, %1068, !dbg !67
  %1101 = fadd float %733, %1069, !dbg !67
  %1102 = fadd float %734, %1070, !dbg !67
  %1103 = fadd float %735, %1071, !dbg !67
  %1104 = fadd float %736, %1072, !dbg !67
  %1105 = fadd float %737, %1073, !dbg !67
  %1106 = fadd float %738, %1074, !dbg !67
  %1107 = fadd float %739, %1075, !dbg !67
  %1108 = fadd float %740, %1076, !dbg !67
  %1109 = fadd float %741, %1077, !dbg !67
  %1110 = fadd float %742, %1078, !dbg !67
  %1111 = fadd float %743, %1079, !dbg !67
  %1112 = fadd float %744, %1080, !dbg !67
  %1113 = fadd float %745, %1081, !dbg !67
  %1114 = extractelement <8 x float> %1044, i64 7, !dbg !68
  %1115 = fsub float %1082, %1114, !dbg !69
  %1116 = fsub float %1083, %1114, !dbg !69
  %1117 = extractelement <8 x float> %1044, i64 6, !dbg !68
  %1118 = fsub float %1084, %1117, !dbg !69
  %1119 = fsub float %1085, %1117, !dbg !69
  %1120 = fsub float %1086, %1114, !dbg !69
  %1121 = fsub float %1087, %1114, !dbg !69
  %1122 = fsub float %1088, %1117, !dbg !69
  %1123 = fsub float %1089, %1117, !dbg !69
  %1124 = fsub float %1090, %1114, !dbg !69
  %1125 = fsub float %1091, %1114, !dbg !69
  %1126 = fsub float %1092, %1117, !dbg !69
  %1127 = fsub float %1093, %1117, !dbg !69
  %1128 = fsub float %1094, %1114, !dbg !69
  %1129 = fsub float %1095, %1114, !dbg !69
  %1130 = fsub float %1096, %1117, !dbg !69
  %1131 = fsub float %1097, %1117, !dbg !69
  %1132 = extractelement <8 x float> %1044, i64 5, !dbg !68
  %1133 = fsub float %1098, %1132, !dbg !69
  %1134 = fsub float %1099, %1132, !dbg !69
  %1135 = extractelement <8 x float> %1044, i64 4, !dbg !68
  %1136 = fsub float %1100, %1135, !dbg !69
  %1137 = fsub float %1101, %1135, !dbg !69
  %1138 = fsub float %1102, %1132, !dbg !69
  %1139 = fsub float %1103, %1132, !dbg !69
  %1140 = fsub float %1104, %1135, !dbg !69
  %1141 = fsub float %1105, %1135, !dbg !69
  %1142 = fsub float %1106, %1132, !dbg !69
  %1143 = fsub float %1107, %1132, !dbg !69
  %1144 = fsub float %1108, %1135, !dbg !69
  %1145 = fsub float %1109, %1135, !dbg !69
  %1146 = fsub float %1110, %1132, !dbg !69
  %1147 = fsub float %1111, %1132, !dbg !69
  %1148 = fsub float %1112, %1135, !dbg !69
  %1149 = fsub float %1113, %1135, !dbg !69
  %1150 = fmul float %1115, 0x3FF7154760000000, !dbg !70
  %1151 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1150) #5, !dbg !70
  %1152 = fmul float %1116, 0x3FF7154760000000, !dbg !70
  %1153 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1152) #5, !dbg !70
  %1154 = fmul float %1118, 0x3FF7154760000000, !dbg !70
  %1155 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1154) #5, !dbg !70
  %1156 = fmul float %1119, 0x3FF7154760000000, !dbg !70
  %1157 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1156) #5, !dbg !70
  %1158 = fmul float %1120, 0x3FF7154760000000, !dbg !70
  %1159 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1158) #5, !dbg !70
  %1160 = fmul float %1121, 0x3FF7154760000000, !dbg !70
  %1161 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1160) #5, !dbg !70
  %1162 = fmul float %1122, 0x3FF7154760000000, !dbg !70
  %1163 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1162) #5, !dbg !70
  %1164 = fmul float %1123, 0x3FF7154760000000, !dbg !70
  %1165 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1164) #5, !dbg !70
  %1166 = fmul float %1124, 0x3FF7154760000000, !dbg !70
  %1167 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1166) #5, !dbg !70
  %1168 = fmul float %1125, 0x3FF7154760000000, !dbg !70
  %1169 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1168) #5, !dbg !70
  %1170 = fmul float %1126, 0x3FF7154760000000, !dbg !70
  %1171 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1170) #5, !dbg !70
  %1172 = fmul float %1127, 0x3FF7154760000000, !dbg !70
  %1173 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1172) #5, !dbg !70
  %1174 = fmul float %1128, 0x3FF7154760000000, !dbg !70
  %1175 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1174) #5, !dbg !70
  %1176 = fmul float %1129, 0x3FF7154760000000, !dbg !70
  %1177 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1176) #5, !dbg !70
  %1178 = fmul float %1130, 0x3FF7154760000000, !dbg !70
  %1179 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1178) #5, !dbg !70
  %1180 = fmul float %1131, 0x3FF7154760000000, !dbg !70
  %1181 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1180) #5, !dbg !70
  %1182 = fmul float %1133, 0x3FF7154760000000, !dbg !70
  %1183 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1182) #5, !dbg !70
  %1184 = fmul float %1134, 0x3FF7154760000000, !dbg !70
  %1185 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1184) #5, !dbg !70
  %1186 = fmul float %1136, 0x3FF7154760000000, !dbg !70
  %1187 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1186) #5, !dbg !70
  %1188 = fmul float %1137, 0x3FF7154760000000, !dbg !70
  %1189 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1188) #5, !dbg !70
  %1190 = fmul float %1138, 0x3FF7154760000000, !dbg !70
  %1191 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1190) #5, !dbg !70
  %1192 = fmul float %1139, 0x3FF7154760000000, !dbg !70
  %1193 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1192) #5, !dbg !70
  %1194 = fmul float %1140, 0x3FF7154760000000, !dbg !70
  %1195 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1194) #5, !dbg !70
  %1196 = fmul float %1141, 0x3FF7154760000000, !dbg !70
  %1197 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1196) #5, !dbg !70
  %1198 = fmul float %1142, 0x3FF7154760000000, !dbg !70
  %1199 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1198) #5, !dbg !70
  %1200 = fmul float %1143, 0x3FF7154760000000, !dbg !70
  %1201 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1200) #5, !dbg !70
  %1202 = fmul float %1144, 0x3FF7154760000000, !dbg !70
  %1203 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1202) #5, !dbg !70
  %1204 = fmul float %1145, 0x3FF7154760000000, !dbg !70
  %1205 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1204) #5, !dbg !70
  %1206 = fmul float %1146, 0x3FF7154760000000, !dbg !70
  %1207 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1206) #5, !dbg !70
  %1208 = fmul float %1147, 0x3FF7154760000000, !dbg !70
  %1209 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1208) #5, !dbg !70
  %1210 = fmul float %1148, 0x3FF7154760000000, !dbg !70
  %1211 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1210) #5, !dbg !70
  %1212 = fmul float %1149, 0x3FF7154760000000, !dbg !70
  %1213 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1212) #5, !dbg !70
  %1214 = fsub <8 x float> %447, %1044, !dbg !71
  %1215 = extractelement <8 x float> %1214, i64 7, !dbg !71
  %1216 = fsub <8 x float> %447, %1044, !dbg !71
  %1217 = extractelement <8 x float> %1216, i64 6, !dbg !71
  %1218 = fsub <8 x float> %447, %1044, !dbg !71
  %1219 = extractelement <8 x float> %1218, i64 5, !dbg !71
  %1220 = fsub <8 x float> %447, %1044, !dbg !71
  %1221 = extractelement <8 x float> %1220, i64 4, !dbg !71
  %1222 = fmul float %1215, 0x3FF7154760000000, !dbg !72
  %1223 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1222) #5, !dbg !72
  %1224 = fmul float %1217, 0x3FF7154760000000, !dbg !72
  %1225 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1224) #5, !dbg !72
  %1226 = fmul float %1219, 0x3FF7154760000000, !dbg !72
  %1227 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1226) #5, !dbg !72
  %1228 = fmul float %1221, 0x3FF7154760000000, !dbg !72
  %1229 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1228) #5, !dbg !72
  %1230 = fmul float %382, %1223, !dbg !73
  %1231 = fmul float %383, %1223, !dbg !73
  %1232 = fmul float %384, %1225, !dbg !73
  %1233 = fmul float %385, %1225, !dbg !73
  %1234 = fmul float %386, %1223, !dbg !73
  %1235 = fmul float %387, %1223, !dbg !73
  %1236 = fmul float %388, %1225, !dbg !73
  %1237 = fmul float %389, %1225, !dbg !73
  %1238 = fmul float %390, %1223, !dbg !73
  %1239 = fmul float %391, %1223, !dbg !73
  %1240 = fmul float %392, %1225, !dbg !73
  %1241 = fmul float %393, %1225, !dbg !73
  %1242 = fmul float %394, %1223, !dbg !73
  %1243 = fmul float %395, %1223, !dbg !73
  %1244 = fmul float %396, %1225, !dbg !73
  %1245 = fmul float %397, %1225, !dbg !73
  %1246 = fmul float %398, %1223, !dbg !73
  %1247 = fmul float %399, %1223, !dbg !73
  %1248 = fmul float %400, %1225, !dbg !73
  %1249 = fmul float %401, %1225, !dbg !73
  %1250 = fmul float %402, %1223, !dbg !73
  %1251 = fmul float %403, %1223, !dbg !73
  %1252 = fmul float %404, %1225, !dbg !73
  %1253 = fmul float %405, %1225, !dbg !73
  %1254 = fmul float %406, %1223, !dbg !73
  %1255 = fmul float %407, %1223, !dbg !73
  %1256 = fmul float %408, %1225, !dbg !73
  %1257 = fmul float %409, %1225, !dbg !73
  %1258 = fmul float %410, %1223, !dbg !73
  %1259 = fmul float %411, %1223, !dbg !73
  %1260 = fmul float %412, %1225, !dbg !73
  %1261 = fmul float %413, %1225, !dbg !73
  %1262 = fmul float %414, %1227, !dbg !73
  %1263 = fmul float %415, %1227, !dbg !73
  %1264 = fmul float %416, %1229, !dbg !73
  %1265 = fmul float %417, %1229, !dbg !73
  %1266 = fmul float %418, %1227, !dbg !73
  %1267 = fmul float %419, %1227, !dbg !73
  %1268 = fmul float %420, %1229, !dbg !73
  %1269 = fmul float %421, %1229, !dbg !73
  %1270 = fmul float %422, %1227, !dbg !73
  %1271 = fmul float %423, %1227, !dbg !73
  %1272 = fmul float %424, %1229, !dbg !73
  %1273 = fmul float %425, %1229, !dbg !73
  %1274 = fmul float %426, %1227, !dbg !73
  %1275 = fmul float %427, %1227, !dbg !73
  %1276 = fmul float %428, %1229, !dbg !73
  %1277 = fmul float %429, %1229, !dbg !73
  %1278 = fmul float %430, %1227, !dbg !73
  %1279 = fmul float %431, %1227, !dbg !73
  %1280 = fmul float %432, %1229, !dbg !73
  %1281 = fmul float %433, %1229, !dbg !73
  %1282 = fmul float %434, %1227, !dbg !73
  %1283 = fmul float %435, %1227, !dbg !73
  %1284 = fmul float %436, %1229, !dbg !73
  %1285 = fmul float %437, %1229, !dbg !73
  %1286 = fmul float %438, %1227, !dbg !73
  %1287 = fmul float %439, %1227, !dbg !73
  %1288 = fmul float %440, %1229, !dbg !73
  %1289 = fmul float %441, %1229, !dbg !73
  %1290 = fmul float %442, %1227, !dbg !73
  %1291 = fmul float %443, %1227, !dbg !73
  %1292 = fmul float %444, %1229, !dbg !73
  %1293 = fmul float %445, %1229, !dbg !73
  %1294 = insertelement <2 x float> poison, float %1151, i64 0, !dbg !70
  %1295 = insertelement <2 x float> %1294, float %1153, i64 1, !dbg !70
  store <2 x float> %1295, ptr addrspace(3) %181, align 8, !dbg !70
  %1296 = insertelement <2 x float> poison, float %1155, i64 0, !dbg !70
  %1297 = insertelement <2 x float> %1296, float %1157, i64 1, !dbg !70
  store <2 x float> %1297, ptr addrspace(3) %185, align 8, !dbg !70
  %1298 = insertelement <2 x float> poison, float %1159, i64 0, !dbg !70
  %1299 = insertelement <2 x float> %1298, float %1161, i64 1, !dbg !70
  store <2 x float> %1299, ptr addrspace(3) %189, align 8, !dbg !70
  %1300 = insertelement <2 x float> poison, float %1163, i64 0, !dbg !70
  %1301 = insertelement <2 x float> %1300, float %1165, i64 1, !dbg !70
  store <2 x float> %1301, ptr addrspace(3) %192, align 8, !dbg !70
  %1302 = insertelement <2 x float> poison, float %1167, i64 0, !dbg !70
  %1303 = insertelement <2 x float> %1302, float %1169, i64 1, !dbg !70
  store <2 x float> %1303, ptr addrspace(3) %196, align 8, !dbg !70
  %1304 = insertelement <2 x float> poison, float %1171, i64 0, !dbg !70
  %1305 = insertelement <2 x float> %1304, float %1173, i64 1, !dbg !70
  store <2 x float> %1305, ptr addrspace(3) %199, align 8, !dbg !70
  %1306 = insertelement <2 x float> poison, float %1175, i64 0, !dbg !70
  %1307 = insertelement <2 x float> %1306, float %1177, i64 1, !dbg !70
  store <2 x float> %1307, ptr addrspace(3) %203, align 8, !dbg !70
  %1308 = insertelement <2 x float> poison, float %1179, i64 0, !dbg !70
  %1309 = insertelement <2 x float> %1308, float %1181, i64 1, !dbg !70
  store <2 x float> %1309, ptr addrspace(3) %206, align 8, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %1310 = load <2 x float>, ptr addrspace(3) %212, align 8, !dbg !70
  %1311 = load <2 x float>, ptr addrspace(3) %213, align 8, !dbg !70
  %1312 = load <2 x float>, ptr addrspace(3) %214, align 8, !dbg !70
  %1313 = load <2 x float>, ptr addrspace(3) %215, align 8, !dbg !70
  %1314 = load <2 x float>, ptr addrspace(3) %216, align 8, !dbg !70
  %1315 = load <2 x float>, ptr addrspace(3) %217, align 8, !dbg !70
  %1316 = load <2 x float>, ptr addrspace(3) %218, align 8, !dbg !70
  %1317 = load <2 x float>, ptr addrspace(3) %219, align 8, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %1318 = insertelement <2 x float> poison, float %1183, i64 0, !dbg !70
  %1319 = insertelement <2 x float> %1318, float %1185, i64 1, !dbg !70
  store <2 x float> %1319, ptr addrspace(3) %181, align 8, !dbg !70
  %1320 = insertelement <2 x float> poison, float %1187, i64 0, !dbg !70
  %1321 = insertelement <2 x float> %1320, float %1189, i64 1, !dbg !70
  store <2 x float> %1321, ptr addrspace(3) %185, align 8, !dbg !70
  %1322 = insertelement <2 x float> poison, float %1191, i64 0, !dbg !70
  %1323 = insertelement <2 x float> %1322, float %1193, i64 1, !dbg !70
  store <2 x float> %1323, ptr addrspace(3) %189, align 8, !dbg !70
  %1324 = insertelement <2 x float> poison, float %1195, i64 0, !dbg !70
  %1325 = insertelement <2 x float> %1324, float %1197, i64 1, !dbg !70
  store <2 x float> %1325, ptr addrspace(3) %192, align 8, !dbg !70
  %1326 = insertelement <2 x float> poison, float %1199, i64 0, !dbg !70
  %1327 = insertelement <2 x float> %1326, float %1201, i64 1, !dbg !70
  store <2 x float> %1327, ptr addrspace(3) %196, align 8, !dbg !70
  %1328 = insertelement <2 x float> poison, float %1203, i64 0, !dbg !70
  %1329 = insertelement <2 x float> %1328, float %1205, i64 1, !dbg !70
  store <2 x float> %1329, ptr addrspace(3) %199, align 8, !dbg !70
  %1330 = insertelement <2 x float> poison, float %1207, i64 0, !dbg !70
  %1331 = insertelement <2 x float> %1330, float %1209, i64 1, !dbg !70
  store <2 x float> %1331, ptr addrspace(3) %203, align 8, !dbg !70
  %1332 = insertelement <2 x float> poison, float %1211, i64 0, !dbg !70
  %1333 = insertelement <2 x float> %1332, float %1213, i64 1, !dbg !70
  store <2 x float> %1333, ptr addrspace(3) %206, align 8, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %1334 = load <2 x float>, ptr addrspace(3) %212, align 8, !dbg !70
  %1335 = load <2 x float>, ptr addrspace(3) %213, align 8, !dbg !70
  %1336 = load <2 x float>, ptr addrspace(3) %214, align 8, !dbg !70
  %1337 = load <2 x float>, ptr addrspace(3) %215, align 8, !dbg !70
  %1338 = load <2 x float>, ptr addrspace(3) %216, align 8, !dbg !70
  %1339 = load <2 x float>, ptr addrspace(3) %217, align 8, !dbg !70
  %1340 = load <2 x float>, ptr addrspace(3) %218, align 8, !dbg !70
  %1341 = load <2 x float>, ptr addrspace(3) %219, align 8, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  store <2 x float> %1310, ptr addrspace(3) %230, align 8, !dbg !70
  store <2 x float> %1311, ptr addrspace(3) %233, align 8, !dbg !70
  store <2 x float> %1312, ptr addrspace(3) %236, align 8, !dbg !70
  store <2 x float> %1313, ptr addrspace(3) %239, align 8, !dbg !70
  store <2 x float> %1314, ptr addrspace(3) %242, align 8, !dbg !70
  store <2 x float> %1315, ptr addrspace(3) %245, align 8, !dbg !70
  store <2 x float> %1316, ptr addrspace(3) %248, align 8, !dbg !70
  store <2 x float> %1317, ptr addrspace(3) %251, align 8, !dbg !70
  store <2 x float> %1334, ptr addrspace(3) %254, align 8, !dbg !70
  store <2 x float> %1335, ptr addrspace(3) %257, align 8, !dbg !70
  store <2 x float> %1336, ptr addrspace(3) %260, align 8, !dbg !70
  store <2 x float> %1337, ptr addrspace(3) %263, align 8, !dbg !70
  store <2 x float> %1338, ptr addrspace(3) %266, align 8, !dbg !70
  store <2 x float> %1339, ptr addrspace(3) %269, align 8, !dbg !70
  store <2 x float> %1340, ptr addrspace(3) %272, align 8, !dbg !70
  store <2 x float> %1341, ptr addrspace(3) %275, align 8, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %.extract131 = load i32, ptr addrspace(3) %283, align 8, !dbg !70
  %.extract132 = load i32, ptr addrspace(3) %305, align 4, !dbg !70
  %.extract133 = load i32, ptr addrspace(3) %284, align 8, !dbg !70
  %.extract134 = load i32, ptr addrspace(3) %306, align 4, !dbg !70
  %.extract135 = load i32, ptr addrspace(3) %287, align 8, !dbg !70
  %.extract136 = load i32, ptr addrspace(3) %307, align 4, !dbg !70
  %.extract137 = load i32, ptr addrspace(3) %288, align 8, !dbg !70
  %.extract138 = load i32, ptr addrspace(3) %308, align 4, !dbg !70
  %.extract139 = load i32, ptr addrspace(3) %291, align 8, !dbg !70
  %.extract140 = load i32, ptr addrspace(3) %309, align 4, !dbg !70
  %.extract141 = load i32, ptr addrspace(3) %292, align 8, !dbg !70
  %.extract142 = load i32, ptr addrspace(3) %310, align 4, !dbg !70
  %.extract143 = load i32, ptr addrspace(3) %295, align 8, !dbg !70
  %.extract144 = load i32, ptr addrspace(3) %311, align 4, !dbg !70
  %.extract145 = load i32, ptr addrspace(3) %296, align 8, !dbg !70
  %.extract146 = load i32, ptr addrspace(3) %312, align 4, !dbg !70
  %.extract147 = load i32, ptr addrspace(3) %297, align 8, !dbg !70
  %.extract148 = load i32, ptr addrspace(3) %313, align 4, !dbg !70
  %.extract149 = load i32, ptr addrspace(3) %298, align 8, !dbg !70
  %.extract150 = load i32, ptr addrspace(3) %314, align 4, !dbg !70
  %.extract151 = load i32, ptr addrspace(3) %299, align 8, !dbg !70
  %.extract152 = load i32, ptr addrspace(3) %315, align 4, !dbg !70
  %.extract153 = load i32, ptr addrspace(3) %300, align 8, !dbg !70
  %.extract154 = load i32, ptr addrspace(3) %316, align 4, !dbg !70
  %.extract155 = load i32, ptr addrspace(3) %301, align 8, !dbg !70
  %.extract156 = load i32, ptr addrspace(3) %317, align 4, !dbg !70
  %.extract157 = load i32, ptr addrspace(3) %302, align 8, !dbg !70
  %.extract158 = load i32, ptr addrspace(3) %318, align 4, !dbg !70
  %.extract159 = load i32, ptr addrspace(3) %303, align 8, !dbg !70
  %.extract160 = load i32, ptr addrspace(3) %319, align 4, !dbg !70
  %.extract161 = load i32, ptr addrspace(3) %304, align 8, !dbg !70
  %.extract162 = load i32, ptr addrspace(3) %320, align 4, !dbg !70
  %1342 = getelementptr i16, ptr addrspace(3) %377, i64 %363, !dbg !74
  %1343 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %1342) #5, !dbg !74
  %1344 = extractvalue { i32, i32, i32, i32 } %1343, 0, !dbg !74
  %1345 = extractvalue { i32, i32, i32, i32 } %1343, 1, !dbg !74
  %1346 = extractvalue { i32, i32, i32, i32 } %1343, 2, !dbg !74
  %1347 = extractvalue { i32, i32, i32, i32 } %1343, 3, !dbg !74
  %1348 = getelementptr i8, ptr addrspace(3) %1342, i64 2048, !dbg !74
  %1349 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %1348) #5, !dbg !74
  %1350 = extractvalue { i32, i32, i32, i32 } %1349, 0, !dbg !74
  %1351 = extractvalue { i32, i32, i32, i32 } %1349, 1, !dbg !74
  %1352 = extractvalue { i32, i32, i32, i32 } %1349, 2, !dbg !74
  %1353 = extractvalue { i32, i32, i32, i32 } %1349, 3, !dbg !74
  %1354 = getelementptr i16, ptr addrspace(3) %377, i64 %367, !dbg !74
  %1355 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %1354) #5, !dbg !74
  %1356 = extractvalue { i32, i32, i32, i32 } %1355, 0, !dbg !74
  %1357 = extractvalue { i32, i32, i32, i32 } %1355, 1, !dbg !74
  %1358 = extractvalue { i32, i32, i32, i32 } %1355, 2, !dbg !74
  %1359 = extractvalue { i32, i32, i32, i32 } %1355, 3, !dbg !74
  %1360 = getelementptr i8, ptr addrspace(3) %1354, i64 2048, !dbg !74
  %1361 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %1360) #5, !dbg !74
  %1362 = extractvalue { i32, i32, i32, i32 } %1361, 0, !dbg !74
  %1363 = extractvalue { i32, i32, i32, i32 } %1361, 1, !dbg !74
  %1364 = extractvalue { i32, i32, i32, i32 } %1361, 2, !dbg !74
  %1365 = extractvalue { i32, i32, i32, i32 } %1361, 3, !dbg !74
  %1366 = getelementptr i16, ptr addrspace(3) %377, i64 %371, !dbg !74
  %1367 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %1366) #5, !dbg !74
  %1368 = extractvalue { i32, i32, i32, i32 } %1367, 0, !dbg !74
  %1369 = extractvalue { i32, i32, i32, i32 } %1367, 1, !dbg !74
  %1370 = extractvalue { i32, i32, i32, i32 } %1367, 2, !dbg !74
  %1371 = extractvalue { i32, i32, i32, i32 } %1367, 3, !dbg !74
  %1372 = getelementptr i8, ptr addrspace(3) %1366, i64 2048, !dbg !74
  %1373 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %1372) #5, !dbg !74
  %1374 = extractvalue { i32, i32, i32, i32 } %1373, 0, !dbg !74
  %1375 = extractvalue { i32, i32, i32, i32 } %1373, 1, !dbg !74
  %1376 = extractvalue { i32, i32, i32, i32 } %1373, 2, !dbg !74
  %1377 = extractvalue { i32, i32, i32, i32 } %1373, 3, !dbg !74
  %1378 = getelementptr i16, ptr addrspace(3) %377, i64 %375, !dbg !74
  %1379 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %1378) #5, !dbg !74
  %1380 = extractvalue { i32, i32, i32, i32 } %1379, 0, !dbg !74
  %1381 = extractvalue { i32, i32, i32, i32 } %1379, 1, !dbg !74
  %1382 = extractvalue { i32, i32, i32, i32 } %1379, 2, !dbg !74
  %1383 = extractvalue { i32, i32, i32, i32 } %1379, 3, !dbg !74
  %1384 = getelementptr i8, ptr addrspace(3) %1378, i64 2048, !dbg !74
  %1385 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %1384) #5, !dbg !74
  %1386 = extractvalue { i32, i32, i32, i32 } %1385, 0, !dbg !74
  %1387 = extractvalue { i32, i32, i32, i32 } %1385, 1, !dbg !74
  %1388 = extractvalue { i32, i32, i32, i32 } %1385, 2, !dbg !74
  %1389 = extractvalue { i32, i32, i32, i32 } %1385, 3, !dbg !74
  %1390 = trunc i32 %1344 to i16, !dbg !74
  %extelt.offset = lshr i32 %1344, 16, !dbg !74
  %1391 = trunc nuw i32 %extelt.offset to i16, !dbg !74
  %1392 = trunc i32 %1345 to i16, !dbg !74
  %extelt.offset163 = lshr i32 %1345, 16, !dbg !74
  %1393 = trunc nuw i32 %extelt.offset163 to i16, !dbg !74
  %1394 = trunc i32 %1346 to i16, !dbg !74
  %extelt.offset164 = lshr i32 %1346, 16, !dbg !74
  %1395 = trunc nuw i32 %extelt.offset164 to i16, !dbg !74
  %1396 = trunc i32 %1347 to i16, !dbg !74
  %extelt.offset165 = lshr i32 %1347, 16, !dbg !74
  %1397 = trunc nuw i32 %extelt.offset165 to i16, !dbg !74
  %1398 = trunc i32 %1350 to i16, !dbg !74
  %extelt.offset166 = lshr i32 %1350, 16, !dbg !74
  %1399 = trunc nuw i32 %extelt.offset166 to i16, !dbg !74
  %1400 = trunc i32 %1351 to i16, !dbg !74
  %extelt.offset167 = lshr i32 %1351, 16, !dbg !74
  %1401 = trunc nuw i32 %extelt.offset167 to i16, !dbg !74
  %1402 = trunc i32 %1352 to i16, !dbg !74
  %extelt.offset168 = lshr i32 %1352, 16, !dbg !74
  %1403 = trunc nuw i32 %extelt.offset168 to i16, !dbg !74
  %1404 = trunc i32 %1353 to i16, !dbg !74
  %extelt.offset169 = lshr i32 %1353, 16, !dbg !74
  %1405 = trunc nuw i32 %extelt.offset169 to i16, !dbg !74
  %1406 = trunc i32 %1356 to i16, !dbg !74
  %extelt.offset170 = lshr i32 %1356, 16, !dbg !74
  %1407 = trunc nuw i32 %extelt.offset170 to i16, !dbg !74
  %1408 = trunc i32 %1357 to i16, !dbg !74
  %extelt.offset171 = lshr i32 %1357, 16, !dbg !74
  %1409 = trunc nuw i32 %extelt.offset171 to i16, !dbg !74
  %1410 = trunc i32 %1358 to i16, !dbg !74
  %extelt.offset172 = lshr i32 %1358, 16, !dbg !74
  %1411 = trunc nuw i32 %extelt.offset172 to i16, !dbg !74
  %1412 = trunc i32 %1359 to i16, !dbg !74
  %extelt.offset173 = lshr i32 %1359, 16, !dbg !74
  %1413 = trunc nuw i32 %extelt.offset173 to i16, !dbg !74
  %1414 = trunc i32 %1362 to i16, !dbg !74
  %extelt.offset174 = lshr i32 %1362, 16, !dbg !74
  %1415 = trunc nuw i32 %extelt.offset174 to i16, !dbg !74
  %1416 = trunc i32 %1363 to i16, !dbg !74
  %extelt.offset175 = lshr i32 %1363, 16, !dbg !74
  %1417 = trunc nuw i32 %extelt.offset175 to i16, !dbg !74
  %1418 = trunc i32 %1364 to i16, !dbg !74
  %extelt.offset176 = lshr i32 %1364, 16, !dbg !74
  %1419 = trunc nuw i32 %extelt.offset176 to i16, !dbg !74
  %1420 = trunc i32 %1365 to i16, !dbg !74
  %extelt.offset177 = lshr i32 %1365, 16, !dbg !74
  %1421 = trunc nuw i32 %extelt.offset177 to i16, !dbg !74
  %1422 = trunc i32 %1368 to i16, !dbg !74
  %extelt.offset178 = lshr i32 %1368, 16, !dbg !74
  %1423 = trunc nuw i32 %extelt.offset178 to i16, !dbg !74
  %1424 = trunc i32 %1369 to i16, !dbg !74
  %extelt.offset179 = lshr i32 %1369, 16, !dbg !74
  %1425 = trunc nuw i32 %extelt.offset179 to i16, !dbg !74
  %1426 = trunc i32 %1370 to i16, !dbg !74
  %extelt.offset180 = lshr i32 %1370, 16, !dbg !74
  %1427 = trunc nuw i32 %extelt.offset180 to i16, !dbg !74
  %1428 = trunc i32 %1371 to i16, !dbg !74
  %extelt.offset181 = lshr i32 %1371, 16, !dbg !74
  %1429 = trunc nuw i32 %extelt.offset181 to i16, !dbg !74
  %1430 = trunc i32 %1374 to i16, !dbg !74
  %extelt.offset182 = lshr i32 %1374, 16, !dbg !74
  %1431 = trunc nuw i32 %extelt.offset182 to i16, !dbg !74
  %1432 = trunc i32 %1375 to i16, !dbg !74
  %extelt.offset183 = lshr i32 %1375, 16, !dbg !74
  %1433 = trunc nuw i32 %extelt.offset183 to i16, !dbg !74
  %1434 = trunc i32 %1376 to i16, !dbg !74
  %extelt.offset184 = lshr i32 %1376, 16, !dbg !74
  %1435 = trunc nuw i32 %extelt.offset184 to i16, !dbg !74
  %1436 = trunc i32 %1377 to i16, !dbg !74
  %extelt.offset185 = lshr i32 %1377, 16, !dbg !74
  %1437 = trunc nuw i32 %extelt.offset185 to i16, !dbg !74
  %1438 = trunc i32 %1380 to i16, !dbg !74
  %extelt.offset186 = lshr i32 %1380, 16, !dbg !74
  %1439 = trunc nuw i32 %extelt.offset186 to i16, !dbg !74
  %1440 = trunc i32 %1381 to i16, !dbg !74
  %extelt.offset187 = lshr i32 %1381, 16, !dbg !74
  %1441 = trunc nuw i32 %extelt.offset187 to i16, !dbg !74
  %1442 = trunc i32 %1382 to i16, !dbg !74
  %extelt.offset188 = lshr i32 %1382, 16, !dbg !74
  %1443 = trunc nuw i32 %extelt.offset188 to i16, !dbg !74
  %1444 = trunc i32 %1383 to i16, !dbg !74
  %extelt.offset189 = lshr i32 %1383, 16, !dbg !74
  %1445 = trunc nuw i32 %extelt.offset189 to i16, !dbg !74
  %1446 = trunc i32 %1386 to i16, !dbg !74
  %extelt.offset190 = lshr i32 %1386, 16, !dbg !74
  %1447 = trunc nuw i32 %extelt.offset190 to i16, !dbg !74
  %1448 = trunc i32 %1387 to i16, !dbg !74
  %extelt.offset191 = lshr i32 %1387, 16, !dbg !74
  %1449 = trunc nuw i32 %extelt.offset191 to i16, !dbg !74
  %1450 = trunc i32 %1388 to i16, !dbg !74
  %extelt.offset192 = lshr i32 %1388, 16, !dbg !74
  %1451 = trunc nuw i32 %extelt.offset192 to i16, !dbg !74
  %1452 = trunc i32 %1389 to i16, !dbg !74
  %extelt.offset193 = lshr i32 %1389, 16, !dbg !74
  %1453 = trunc nuw i32 %extelt.offset193 to i16, !dbg !74
  %1454 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1390) #5, !dbg !74
  %1455 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1391) #5, !dbg !74
  %1456 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1392) #5, !dbg !74
  %1457 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1393) #5, !dbg !74
  %1458 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1394) #5, !dbg !74
  %1459 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1395) #5, !dbg !74
  %1460 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1396) #5, !dbg !74
  %1461 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1397) #5, !dbg !74
  %1462 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1398) #5, !dbg !74
  %1463 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1399) #5, !dbg !74
  %1464 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1400) #5, !dbg !74
  %1465 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1401) #5, !dbg !74
  %1466 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1402) #5, !dbg !74
  %1467 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1403) #5, !dbg !74
  %1468 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1404) #5, !dbg !74
  %1469 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1405) #5, !dbg !74
  %1470 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1406) #5, !dbg !74
  %1471 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1407) #5, !dbg !74
  %1472 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1408) #5, !dbg !74
  %1473 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1409) #5, !dbg !74
  %1474 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1410) #5, !dbg !74
  %1475 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1411) #5, !dbg !74
  %1476 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1412) #5, !dbg !74
  %1477 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1413) #5, !dbg !74
  %1478 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1414) #5, !dbg !74
  %1479 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1415) #5, !dbg !74
  %1480 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1416) #5, !dbg !74
  %1481 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1417) #5, !dbg !74
  %1482 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1418) #5, !dbg !74
  %1483 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1419) #5, !dbg !74
  %1484 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1420) #5, !dbg !74
  %1485 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1421) #5, !dbg !74
  %1486 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1422) #5, !dbg !74
  %1487 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1423) #5, !dbg !74
  %1488 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1424) #5, !dbg !74
  %1489 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1425) #5, !dbg !74
  %1490 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1426) #5, !dbg !74
  %1491 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1427) #5, !dbg !74
  %1492 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1428) #5, !dbg !74
  %1493 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1429) #5, !dbg !74
  %1494 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1430) #5, !dbg !74
  %1495 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1431) #5, !dbg !74
  %1496 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1432) #5, !dbg !74
  %1497 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1433) #5, !dbg !74
  %1498 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1434) #5, !dbg !74
  %1499 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1435) #5, !dbg !74
  %1500 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1436) #5, !dbg !74
  %1501 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1437) #5, !dbg !74
  %1502 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1438) #5, !dbg !74
  %1503 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1439) #5, !dbg !74
  %1504 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1440) #5, !dbg !74
  %1505 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1441) #5, !dbg !74
  %1506 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1442) #5, !dbg !74
  %1507 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1443) #5, !dbg !74
  %1508 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1444) #5, !dbg !74
  %1509 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1445) #5, !dbg !74
  %1510 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1446) #5, !dbg !74
  %1511 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1447) #5, !dbg !74
  %1512 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1448) #5, !dbg !74
  %1513 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1449) #5, !dbg !74
  %1514 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1450) #5, !dbg !74
  %1515 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1451) #5, !dbg !74
  %1516 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1452) #5, !dbg !74
  %1517 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1453) #5, !dbg !74
  %1518 = bitcast float %1454 to i32, !dbg !74
  %1519 = bitcast float %1455 to i32, !dbg !74
  %1520 = bitcast float %1458 to i32, !dbg !74
  %1521 = bitcast float %1459 to i32, !dbg !74
  %1522 = bitcast float %1456 to i32, !dbg !74
  %1523 = bitcast float %1457 to i32, !dbg !74
  %1524 = bitcast float %1460 to i32, !dbg !74
  %1525 = bitcast float %1461 to i32, !dbg !74
  %1526 = bitcast float %1462 to i32, !dbg !74
  %1527 = bitcast float %1463 to i32, !dbg !74
  %1528 = bitcast float %1466 to i32, !dbg !74
  %1529 = bitcast float %1467 to i32, !dbg !74
  %1530 = bitcast float %1464 to i32, !dbg !74
  %1531 = bitcast float %1465 to i32, !dbg !74
  %1532 = bitcast float %1468 to i32, !dbg !74
  %1533 = bitcast float %1469 to i32, !dbg !74
  %1534 = bitcast float %1470 to i32, !dbg !74
  %1535 = bitcast float %1471 to i32, !dbg !74
  %1536 = bitcast float %1474 to i32, !dbg !74
  %1537 = bitcast float %1475 to i32, !dbg !74
  %1538 = bitcast float %1472 to i32, !dbg !74
  %1539 = bitcast float %1473 to i32, !dbg !74
  %1540 = bitcast float %1476 to i32, !dbg !74
  %1541 = bitcast float %1477 to i32, !dbg !74
  %1542 = bitcast float %1478 to i32, !dbg !74
  %1543 = bitcast float %1479 to i32, !dbg !74
  %1544 = bitcast float %1482 to i32, !dbg !74
  %1545 = bitcast float %1483 to i32, !dbg !74
  %1546 = bitcast float %1480 to i32, !dbg !74
  %1547 = bitcast float %1481 to i32, !dbg !74
  %1548 = bitcast float %1484 to i32, !dbg !74
  %1549 = bitcast float %1485 to i32, !dbg !74
  %1550 = bitcast float %1486 to i32, !dbg !74
  %1551 = bitcast float %1487 to i32, !dbg !74
  %1552 = bitcast float %1490 to i32, !dbg !74
  %1553 = bitcast float %1491 to i32, !dbg !74
  %1554 = bitcast float %1488 to i32, !dbg !74
  %1555 = bitcast float %1489 to i32, !dbg !74
  %1556 = bitcast float %1492 to i32, !dbg !74
  %1557 = bitcast float %1493 to i32, !dbg !74
  %1558 = bitcast float %1494 to i32, !dbg !74
  %1559 = bitcast float %1495 to i32, !dbg !74
  %1560 = bitcast float %1498 to i32, !dbg !74
  %1561 = bitcast float %1499 to i32, !dbg !74
  %1562 = bitcast float %1496 to i32, !dbg !74
  %1563 = bitcast float %1497 to i32, !dbg !74
  %1564 = bitcast float %1500 to i32, !dbg !74
  %1565 = bitcast float %1501 to i32, !dbg !74
  %1566 = bitcast float %1502 to i32, !dbg !74
  %1567 = bitcast float %1503 to i32, !dbg !74
  %1568 = bitcast float %1506 to i32, !dbg !74
  %1569 = bitcast float %1507 to i32, !dbg !74
  %1570 = bitcast float %1504 to i32, !dbg !74
  %1571 = bitcast float %1505 to i32, !dbg !74
  %1572 = bitcast float %1508 to i32, !dbg !74
  %1573 = bitcast float %1509 to i32, !dbg !74
  %1574 = bitcast float %1510 to i32, !dbg !74
  %1575 = bitcast float %1511 to i32, !dbg !74
  %1576 = bitcast float %1514 to i32, !dbg !74
  %1577 = bitcast float %1515 to i32, !dbg !74
  %1578 = bitcast float %1512 to i32, !dbg !74
  %1579 = bitcast float %1513 to i32, !dbg !74
  %1580 = bitcast float %1516 to i32, !dbg !74
  %1581 = bitcast float %1517 to i32, !dbg !74
  %1582 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1230, float %1231, float %1232, float %1233, i32 %.extract131, i32 %.extract133, i32 %.extract132, i32 %.extract134, i32 %1518, i32 %1519) #5, !dbg !75
  %1583 = extractvalue { float, float, float, float } %1582, 0, !dbg !75
  %1584 = extractvalue { float, float, float, float } %1582, 1, !dbg !75
  %1585 = extractvalue { float, float, float, float } %1582, 2, !dbg !75
  %1586 = extractvalue { float, float, float, float } %1582, 3, !dbg !75
  %1587 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1234, float %1235, float %1236, float %1237, i32 %.extract131, i32 %.extract133, i32 %.extract132, i32 %.extract134, i32 %1520, i32 %1521) #5, !dbg !75
  %1588 = extractvalue { float, float, float, float } %1587, 0, !dbg !75
  %1589 = extractvalue { float, float, float, float } %1587, 1, !dbg !75
  %1590 = extractvalue { float, float, float, float } %1587, 2, !dbg !75
  %1591 = extractvalue { float, float, float, float } %1587, 3, !dbg !75
  %1592 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1238, float %1239, float %1240, float %1241, i32 %.extract131, i32 %.extract133, i32 %.extract132, i32 %.extract134, i32 %1534, i32 %1535) #5, !dbg !75
  %1593 = extractvalue { float, float, float, float } %1592, 0, !dbg !75
  %1594 = extractvalue { float, float, float, float } %1592, 1, !dbg !75
  %1595 = extractvalue { float, float, float, float } %1592, 2, !dbg !75
  %1596 = extractvalue { float, float, float, float } %1592, 3, !dbg !75
  %1597 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1242, float %1243, float %1244, float %1245, i32 %.extract131, i32 %.extract133, i32 %.extract132, i32 %.extract134, i32 %1536, i32 %1537) #5, !dbg !75
  %1598 = extractvalue { float, float, float, float } %1597, 0, !dbg !75
  %1599 = extractvalue { float, float, float, float } %1597, 1, !dbg !75
  %1600 = extractvalue { float, float, float, float } %1597, 2, !dbg !75
  %1601 = extractvalue { float, float, float, float } %1597, 3, !dbg !75
  %1602 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1246, float %1247, float %1248, float %1249, i32 %.extract131, i32 %.extract133, i32 %.extract132, i32 %.extract134, i32 %1550, i32 %1551) #5, !dbg !75
  %1603 = extractvalue { float, float, float, float } %1602, 0, !dbg !75
  %1604 = extractvalue { float, float, float, float } %1602, 1, !dbg !75
  %1605 = extractvalue { float, float, float, float } %1602, 2, !dbg !75
  %1606 = extractvalue { float, float, float, float } %1602, 3, !dbg !75
  %1607 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1250, float %1251, float %1252, float %1253, i32 %.extract131, i32 %.extract133, i32 %.extract132, i32 %.extract134, i32 %1552, i32 %1553) #5, !dbg !75
  %1608 = extractvalue { float, float, float, float } %1607, 0, !dbg !75
  %1609 = extractvalue { float, float, float, float } %1607, 1, !dbg !75
  %1610 = extractvalue { float, float, float, float } %1607, 2, !dbg !75
  %1611 = extractvalue { float, float, float, float } %1607, 3, !dbg !75
  %1612 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1254, float %1255, float %1256, float %1257, i32 %.extract131, i32 %.extract133, i32 %.extract132, i32 %.extract134, i32 %1566, i32 %1567) #5, !dbg !75
  %1613 = extractvalue { float, float, float, float } %1612, 0, !dbg !75
  %1614 = extractvalue { float, float, float, float } %1612, 1, !dbg !75
  %1615 = extractvalue { float, float, float, float } %1612, 2, !dbg !75
  %1616 = extractvalue { float, float, float, float } %1612, 3, !dbg !75
  %1617 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1258, float %1259, float %1260, float %1261, i32 %.extract131, i32 %.extract133, i32 %.extract132, i32 %.extract134, i32 %1568, i32 %1569) #5, !dbg !75
  %1618 = extractvalue { float, float, float, float } %1617, 0, !dbg !75
  %1619 = extractvalue { float, float, float, float } %1617, 1, !dbg !75
  %1620 = extractvalue { float, float, float, float } %1617, 2, !dbg !75
  %1621 = extractvalue { float, float, float, float } %1617, 3, !dbg !75
  %1622 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1262, float %1263, float %1264, float %1265, i32 %.extract147, i32 %.extract149, i32 %.extract148, i32 %.extract150, i32 %1518, i32 %1519) #5, !dbg !75
  %1623 = extractvalue { float, float, float, float } %1622, 0, !dbg !75
  %1624 = extractvalue { float, float, float, float } %1622, 1, !dbg !75
  %1625 = extractvalue { float, float, float, float } %1622, 2, !dbg !75
  %1626 = extractvalue { float, float, float, float } %1622, 3, !dbg !75
  %1627 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1266, float %1267, float %1268, float %1269, i32 %.extract147, i32 %.extract149, i32 %.extract148, i32 %.extract150, i32 %1520, i32 %1521) #5, !dbg !75
  %1628 = extractvalue { float, float, float, float } %1627, 0, !dbg !75
  %1629 = extractvalue { float, float, float, float } %1627, 1, !dbg !75
  %1630 = extractvalue { float, float, float, float } %1627, 2, !dbg !75
  %1631 = extractvalue { float, float, float, float } %1627, 3, !dbg !75
  %1632 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1270, float %1271, float %1272, float %1273, i32 %.extract147, i32 %.extract149, i32 %.extract148, i32 %.extract150, i32 %1534, i32 %1535) #5, !dbg !75
  %1633 = extractvalue { float, float, float, float } %1632, 0, !dbg !75
  %1634 = extractvalue { float, float, float, float } %1632, 1, !dbg !75
  %1635 = extractvalue { float, float, float, float } %1632, 2, !dbg !75
  %1636 = extractvalue { float, float, float, float } %1632, 3, !dbg !75
  %1637 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1274, float %1275, float %1276, float %1277, i32 %.extract147, i32 %.extract149, i32 %.extract148, i32 %.extract150, i32 %1536, i32 %1537) #5, !dbg !75
  %1638 = extractvalue { float, float, float, float } %1637, 0, !dbg !75
  %1639 = extractvalue { float, float, float, float } %1637, 1, !dbg !75
  %1640 = extractvalue { float, float, float, float } %1637, 2, !dbg !75
  %1641 = extractvalue { float, float, float, float } %1637, 3, !dbg !75
  %1642 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1278, float %1279, float %1280, float %1281, i32 %.extract147, i32 %.extract149, i32 %.extract148, i32 %.extract150, i32 %1550, i32 %1551) #5, !dbg !75
  %1643 = extractvalue { float, float, float, float } %1642, 0, !dbg !75
  %1644 = extractvalue { float, float, float, float } %1642, 1, !dbg !75
  %1645 = extractvalue { float, float, float, float } %1642, 2, !dbg !75
  %1646 = extractvalue { float, float, float, float } %1642, 3, !dbg !75
  %1647 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1282, float %1283, float %1284, float %1285, i32 %.extract147, i32 %.extract149, i32 %.extract148, i32 %.extract150, i32 %1552, i32 %1553) #5, !dbg !75
  %1648 = extractvalue { float, float, float, float } %1647, 0, !dbg !75
  %1649 = extractvalue { float, float, float, float } %1647, 1, !dbg !75
  %1650 = extractvalue { float, float, float, float } %1647, 2, !dbg !75
  %1651 = extractvalue { float, float, float, float } %1647, 3, !dbg !75
  %1652 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1286, float %1287, float %1288, float %1289, i32 %.extract147, i32 %.extract149, i32 %.extract148, i32 %.extract150, i32 %1566, i32 %1567) #5, !dbg !75
  %1653 = extractvalue { float, float, float, float } %1652, 0, !dbg !75
  %1654 = extractvalue { float, float, float, float } %1652, 1, !dbg !75
  %1655 = extractvalue { float, float, float, float } %1652, 2, !dbg !75
  %1656 = extractvalue { float, float, float, float } %1652, 3, !dbg !75
  %1657 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1290, float %1291, float %1292, float %1293, i32 %.extract147, i32 %.extract149, i32 %.extract148, i32 %.extract150, i32 %1568, i32 %1569) #5, !dbg !75
  %1658 = extractvalue { float, float, float, float } %1657, 0, !dbg !75
  %1659 = extractvalue { float, float, float, float } %1657, 1, !dbg !75
  %1660 = extractvalue { float, float, float, float } %1657, 2, !dbg !75
  %1661 = extractvalue { float, float, float, float } %1657, 3, !dbg !75
  %1662 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1583, float %1584, float %1585, float %1586, i32 %.extract135, i32 %.extract137, i32 %.extract136, i32 %.extract138, i32 %1522, i32 %1523) #5, !dbg !75
  %1663 = extractvalue { float, float, float, float } %1662, 0, !dbg !75
  %1664 = extractvalue { float, float, float, float } %1662, 1, !dbg !75
  %1665 = extractvalue { float, float, float, float } %1662, 2, !dbg !75
  %1666 = extractvalue { float, float, float, float } %1662, 3, !dbg !75
  %1667 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1588, float %1589, float %1590, float %1591, i32 %.extract135, i32 %.extract137, i32 %.extract136, i32 %.extract138, i32 %1524, i32 %1525) #5, !dbg !75
  %1668 = extractvalue { float, float, float, float } %1667, 0, !dbg !75
  %1669 = extractvalue { float, float, float, float } %1667, 1, !dbg !75
  %1670 = extractvalue { float, float, float, float } %1667, 2, !dbg !75
  %1671 = extractvalue { float, float, float, float } %1667, 3, !dbg !75
  %1672 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1593, float %1594, float %1595, float %1596, i32 %.extract135, i32 %.extract137, i32 %.extract136, i32 %.extract138, i32 %1538, i32 %1539) #5, !dbg !75
  %1673 = extractvalue { float, float, float, float } %1672, 0, !dbg !75
  %1674 = extractvalue { float, float, float, float } %1672, 1, !dbg !75
  %1675 = extractvalue { float, float, float, float } %1672, 2, !dbg !75
  %1676 = extractvalue { float, float, float, float } %1672, 3, !dbg !75
  %1677 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1598, float %1599, float %1600, float %1601, i32 %.extract135, i32 %.extract137, i32 %.extract136, i32 %.extract138, i32 %1540, i32 %1541) #5, !dbg !75
  %1678 = extractvalue { float, float, float, float } %1677, 0, !dbg !75
  %1679 = extractvalue { float, float, float, float } %1677, 1, !dbg !75
  %1680 = extractvalue { float, float, float, float } %1677, 2, !dbg !75
  %1681 = extractvalue { float, float, float, float } %1677, 3, !dbg !75
  %1682 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1603, float %1604, float %1605, float %1606, i32 %.extract135, i32 %.extract137, i32 %.extract136, i32 %.extract138, i32 %1554, i32 %1555) #5, !dbg !75
  %1683 = extractvalue { float, float, float, float } %1682, 0, !dbg !75
  %1684 = extractvalue { float, float, float, float } %1682, 1, !dbg !75
  %1685 = extractvalue { float, float, float, float } %1682, 2, !dbg !75
  %1686 = extractvalue { float, float, float, float } %1682, 3, !dbg !75
  %1687 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1608, float %1609, float %1610, float %1611, i32 %.extract135, i32 %.extract137, i32 %.extract136, i32 %.extract138, i32 %1556, i32 %1557) #5, !dbg !75
  %1688 = extractvalue { float, float, float, float } %1687, 0, !dbg !75
  %1689 = extractvalue { float, float, float, float } %1687, 1, !dbg !75
  %1690 = extractvalue { float, float, float, float } %1687, 2, !dbg !75
  %1691 = extractvalue { float, float, float, float } %1687, 3, !dbg !75
  %1692 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1613, float %1614, float %1615, float %1616, i32 %.extract135, i32 %.extract137, i32 %.extract136, i32 %.extract138, i32 %1570, i32 %1571) #5, !dbg !75
  %1693 = extractvalue { float, float, float, float } %1692, 0, !dbg !75
  %1694 = extractvalue { float, float, float, float } %1692, 1, !dbg !75
  %1695 = extractvalue { float, float, float, float } %1692, 2, !dbg !75
  %1696 = extractvalue { float, float, float, float } %1692, 3, !dbg !75
  %1697 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1618, float %1619, float %1620, float %1621, i32 %.extract135, i32 %.extract137, i32 %.extract136, i32 %.extract138, i32 %1572, i32 %1573) #5, !dbg !75
  %1698 = extractvalue { float, float, float, float } %1697, 0, !dbg !75
  %1699 = extractvalue { float, float, float, float } %1697, 1, !dbg !75
  %1700 = extractvalue { float, float, float, float } %1697, 2, !dbg !75
  %1701 = extractvalue { float, float, float, float } %1697, 3, !dbg !75
  %1702 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1623, float %1624, float %1625, float %1626, i32 %.extract151, i32 %.extract153, i32 %.extract152, i32 %.extract154, i32 %1522, i32 %1523) #5, !dbg !75
  %1703 = extractvalue { float, float, float, float } %1702, 0, !dbg !75
  %1704 = extractvalue { float, float, float, float } %1702, 1, !dbg !75
  %1705 = extractvalue { float, float, float, float } %1702, 2, !dbg !75
  %1706 = extractvalue { float, float, float, float } %1702, 3, !dbg !75
  %1707 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1628, float %1629, float %1630, float %1631, i32 %.extract151, i32 %.extract153, i32 %.extract152, i32 %.extract154, i32 %1524, i32 %1525) #5, !dbg !75
  %1708 = extractvalue { float, float, float, float } %1707, 0, !dbg !75
  %1709 = extractvalue { float, float, float, float } %1707, 1, !dbg !75
  %1710 = extractvalue { float, float, float, float } %1707, 2, !dbg !75
  %1711 = extractvalue { float, float, float, float } %1707, 3, !dbg !75
  %1712 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1633, float %1634, float %1635, float %1636, i32 %.extract151, i32 %.extract153, i32 %.extract152, i32 %.extract154, i32 %1538, i32 %1539) #5, !dbg !75
  %1713 = extractvalue { float, float, float, float } %1712, 0, !dbg !75
  %1714 = extractvalue { float, float, float, float } %1712, 1, !dbg !75
  %1715 = extractvalue { float, float, float, float } %1712, 2, !dbg !75
  %1716 = extractvalue { float, float, float, float } %1712, 3, !dbg !75
  %1717 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1638, float %1639, float %1640, float %1641, i32 %.extract151, i32 %.extract153, i32 %.extract152, i32 %.extract154, i32 %1540, i32 %1541) #5, !dbg !75
  %1718 = extractvalue { float, float, float, float } %1717, 0, !dbg !75
  %1719 = extractvalue { float, float, float, float } %1717, 1, !dbg !75
  %1720 = extractvalue { float, float, float, float } %1717, 2, !dbg !75
  %1721 = extractvalue { float, float, float, float } %1717, 3, !dbg !75
  %1722 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1643, float %1644, float %1645, float %1646, i32 %.extract151, i32 %.extract153, i32 %.extract152, i32 %.extract154, i32 %1554, i32 %1555) #5, !dbg !75
  %1723 = extractvalue { float, float, float, float } %1722, 0, !dbg !75
  %1724 = extractvalue { float, float, float, float } %1722, 1, !dbg !75
  %1725 = extractvalue { float, float, float, float } %1722, 2, !dbg !75
  %1726 = extractvalue { float, float, float, float } %1722, 3, !dbg !75
  %1727 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1648, float %1649, float %1650, float %1651, i32 %.extract151, i32 %.extract153, i32 %.extract152, i32 %.extract154, i32 %1556, i32 %1557) #5, !dbg !75
  %1728 = extractvalue { float, float, float, float } %1727, 0, !dbg !75
  %1729 = extractvalue { float, float, float, float } %1727, 1, !dbg !75
  %1730 = extractvalue { float, float, float, float } %1727, 2, !dbg !75
  %1731 = extractvalue { float, float, float, float } %1727, 3, !dbg !75
  %1732 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1653, float %1654, float %1655, float %1656, i32 %.extract151, i32 %.extract153, i32 %.extract152, i32 %.extract154, i32 %1570, i32 %1571) #5, !dbg !75
  %1733 = extractvalue { float, float, float, float } %1732, 0, !dbg !75
  %1734 = extractvalue { float, float, float, float } %1732, 1, !dbg !75
  %1735 = extractvalue { float, float, float, float } %1732, 2, !dbg !75
  %1736 = extractvalue { float, float, float, float } %1732, 3, !dbg !75
  %1737 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1658, float %1659, float %1660, float %1661, i32 %.extract151, i32 %.extract153, i32 %.extract152, i32 %.extract154, i32 %1572, i32 %1573) #5, !dbg !75
  %1738 = extractvalue { float, float, float, float } %1737, 0, !dbg !75
  %1739 = extractvalue { float, float, float, float } %1737, 1, !dbg !75
  %1740 = extractvalue { float, float, float, float } %1737, 2, !dbg !75
  %1741 = extractvalue { float, float, float, float } %1737, 3, !dbg !75
  %1742 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1663, float %1664, float %1665, float %1666, i32 %.extract139, i32 %.extract141, i32 %.extract140, i32 %.extract142, i32 %1526, i32 %1527) #5, !dbg !75
  %1743 = extractvalue { float, float, float, float } %1742, 0, !dbg !75
  %1744 = extractvalue { float, float, float, float } %1742, 1, !dbg !75
  %1745 = extractvalue { float, float, float, float } %1742, 2, !dbg !75
  %1746 = extractvalue { float, float, float, float } %1742, 3, !dbg !75
  %1747 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1668, float %1669, float %1670, float %1671, i32 %.extract139, i32 %.extract141, i32 %.extract140, i32 %.extract142, i32 %1528, i32 %1529) #5, !dbg !75
  %1748 = extractvalue { float, float, float, float } %1747, 0, !dbg !75
  %1749 = extractvalue { float, float, float, float } %1747, 1, !dbg !75
  %1750 = extractvalue { float, float, float, float } %1747, 2, !dbg !75
  %1751 = extractvalue { float, float, float, float } %1747, 3, !dbg !75
  %1752 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1673, float %1674, float %1675, float %1676, i32 %.extract139, i32 %.extract141, i32 %.extract140, i32 %.extract142, i32 %1542, i32 %1543) #5, !dbg !75
  %1753 = extractvalue { float, float, float, float } %1752, 0, !dbg !75
  %1754 = extractvalue { float, float, float, float } %1752, 1, !dbg !75
  %1755 = extractvalue { float, float, float, float } %1752, 2, !dbg !75
  %1756 = extractvalue { float, float, float, float } %1752, 3, !dbg !75
  %1757 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1678, float %1679, float %1680, float %1681, i32 %.extract139, i32 %.extract141, i32 %.extract140, i32 %.extract142, i32 %1544, i32 %1545) #5, !dbg !75
  %1758 = extractvalue { float, float, float, float } %1757, 0, !dbg !75
  %1759 = extractvalue { float, float, float, float } %1757, 1, !dbg !75
  %1760 = extractvalue { float, float, float, float } %1757, 2, !dbg !75
  %1761 = extractvalue { float, float, float, float } %1757, 3, !dbg !75
  %1762 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1683, float %1684, float %1685, float %1686, i32 %.extract139, i32 %.extract141, i32 %.extract140, i32 %.extract142, i32 %1558, i32 %1559) #5, !dbg !75
  %1763 = extractvalue { float, float, float, float } %1762, 0, !dbg !75
  %1764 = extractvalue { float, float, float, float } %1762, 1, !dbg !75
  %1765 = extractvalue { float, float, float, float } %1762, 2, !dbg !75
  %1766 = extractvalue { float, float, float, float } %1762, 3, !dbg !75
  %1767 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1688, float %1689, float %1690, float %1691, i32 %.extract139, i32 %.extract141, i32 %.extract140, i32 %.extract142, i32 %1560, i32 %1561) #5, !dbg !75
  %1768 = extractvalue { float, float, float, float } %1767, 0, !dbg !75
  %1769 = extractvalue { float, float, float, float } %1767, 1, !dbg !75
  %1770 = extractvalue { float, float, float, float } %1767, 2, !dbg !75
  %1771 = extractvalue { float, float, float, float } %1767, 3, !dbg !75
  %1772 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1693, float %1694, float %1695, float %1696, i32 %.extract139, i32 %.extract141, i32 %.extract140, i32 %.extract142, i32 %1574, i32 %1575) #5, !dbg !75
  %1773 = extractvalue { float, float, float, float } %1772, 0, !dbg !75
  %1774 = extractvalue { float, float, float, float } %1772, 1, !dbg !75
  %1775 = extractvalue { float, float, float, float } %1772, 2, !dbg !75
  %1776 = extractvalue { float, float, float, float } %1772, 3, !dbg !75
  %1777 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1698, float %1699, float %1700, float %1701, i32 %.extract139, i32 %.extract141, i32 %.extract140, i32 %.extract142, i32 %1576, i32 %1577) #5, !dbg !75
  %1778 = extractvalue { float, float, float, float } %1777, 0, !dbg !75
  %1779 = extractvalue { float, float, float, float } %1777, 1, !dbg !75
  %1780 = extractvalue { float, float, float, float } %1777, 2, !dbg !75
  %1781 = extractvalue { float, float, float, float } %1777, 3, !dbg !75
  %1782 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1703, float %1704, float %1705, float %1706, i32 %.extract155, i32 %.extract157, i32 %.extract156, i32 %.extract158, i32 %1526, i32 %1527) #5, !dbg !75
  %1783 = extractvalue { float, float, float, float } %1782, 0, !dbg !75
  %1784 = extractvalue { float, float, float, float } %1782, 1, !dbg !75
  %1785 = extractvalue { float, float, float, float } %1782, 2, !dbg !75
  %1786 = extractvalue { float, float, float, float } %1782, 3, !dbg !75
  %1787 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1708, float %1709, float %1710, float %1711, i32 %.extract155, i32 %.extract157, i32 %.extract156, i32 %.extract158, i32 %1528, i32 %1529) #5, !dbg !75
  %1788 = extractvalue { float, float, float, float } %1787, 0, !dbg !75
  %1789 = extractvalue { float, float, float, float } %1787, 1, !dbg !75
  %1790 = extractvalue { float, float, float, float } %1787, 2, !dbg !75
  %1791 = extractvalue { float, float, float, float } %1787, 3, !dbg !75
  %1792 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1713, float %1714, float %1715, float %1716, i32 %.extract155, i32 %.extract157, i32 %.extract156, i32 %.extract158, i32 %1542, i32 %1543) #5, !dbg !75
  %1793 = extractvalue { float, float, float, float } %1792, 0, !dbg !75
  %1794 = extractvalue { float, float, float, float } %1792, 1, !dbg !75
  %1795 = extractvalue { float, float, float, float } %1792, 2, !dbg !75
  %1796 = extractvalue { float, float, float, float } %1792, 3, !dbg !75
  %1797 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1718, float %1719, float %1720, float %1721, i32 %.extract155, i32 %.extract157, i32 %.extract156, i32 %.extract158, i32 %1544, i32 %1545) #5, !dbg !75
  %1798 = extractvalue { float, float, float, float } %1797, 0, !dbg !75
  %1799 = extractvalue { float, float, float, float } %1797, 1, !dbg !75
  %1800 = extractvalue { float, float, float, float } %1797, 2, !dbg !75
  %1801 = extractvalue { float, float, float, float } %1797, 3, !dbg !75
  %1802 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1723, float %1724, float %1725, float %1726, i32 %.extract155, i32 %.extract157, i32 %.extract156, i32 %.extract158, i32 %1558, i32 %1559) #5, !dbg !75
  %1803 = extractvalue { float, float, float, float } %1802, 0, !dbg !75
  %1804 = extractvalue { float, float, float, float } %1802, 1, !dbg !75
  %1805 = extractvalue { float, float, float, float } %1802, 2, !dbg !75
  %1806 = extractvalue { float, float, float, float } %1802, 3, !dbg !75
  %1807 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1728, float %1729, float %1730, float %1731, i32 %.extract155, i32 %.extract157, i32 %.extract156, i32 %.extract158, i32 %1560, i32 %1561) #5, !dbg !75
  %1808 = extractvalue { float, float, float, float } %1807, 0, !dbg !75
  %1809 = extractvalue { float, float, float, float } %1807, 1, !dbg !75
  %1810 = extractvalue { float, float, float, float } %1807, 2, !dbg !75
  %1811 = extractvalue { float, float, float, float } %1807, 3, !dbg !75
  %1812 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1733, float %1734, float %1735, float %1736, i32 %.extract155, i32 %.extract157, i32 %.extract156, i32 %.extract158, i32 %1574, i32 %1575) #5, !dbg !75
  %1813 = extractvalue { float, float, float, float } %1812, 0, !dbg !75
  %1814 = extractvalue { float, float, float, float } %1812, 1, !dbg !75
  %1815 = extractvalue { float, float, float, float } %1812, 2, !dbg !75
  %1816 = extractvalue { float, float, float, float } %1812, 3, !dbg !75
  %1817 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1738, float %1739, float %1740, float %1741, i32 %.extract155, i32 %.extract157, i32 %.extract156, i32 %.extract158, i32 %1576, i32 %1577) #5, !dbg !75
  %1818 = extractvalue { float, float, float, float } %1817, 0, !dbg !75
  %1819 = extractvalue { float, float, float, float } %1817, 1, !dbg !75
  %1820 = extractvalue { float, float, float, float } %1817, 2, !dbg !75
  %1821 = extractvalue { float, float, float, float } %1817, 3, !dbg !75
  %1822 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1743, float %1744, float %1745, float %1746, i32 %.extract143, i32 %.extract145, i32 %.extract144, i32 %.extract146, i32 %1530, i32 %1531) #5, !dbg !75
  %1823 = extractvalue { float, float, float, float } %1822, 0, !dbg !75
  %1824 = extractvalue { float, float, float, float } %1822, 1, !dbg !75
  %1825 = extractvalue { float, float, float, float } %1822, 2, !dbg !75
  %1826 = extractvalue { float, float, float, float } %1822, 3, !dbg !75
  %1827 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1748, float %1749, float %1750, float %1751, i32 %.extract143, i32 %.extract145, i32 %.extract144, i32 %.extract146, i32 %1532, i32 %1533) #5, !dbg !75
  %1828 = extractvalue { float, float, float, float } %1827, 0, !dbg !75
  %1829 = extractvalue { float, float, float, float } %1827, 1, !dbg !75
  %1830 = extractvalue { float, float, float, float } %1827, 2, !dbg !75
  %1831 = extractvalue { float, float, float, float } %1827, 3, !dbg !75
  %1832 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1753, float %1754, float %1755, float %1756, i32 %.extract143, i32 %.extract145, i32 %.extract144, i32 %.extract146, i32 %1546, i32 %1547) #5, !dbg !75
  %1833 = extractvalue { float, float, float, float } %1832, 0, !dbg !75
  %1834 = extractvalue { float, float, float, float } %1832, 1, !dbg !75
  %1835 = extractvalue { float, float, float, float } %1832, 2, !dbg !75
  %1836 = extractvalue { float, float, float, float } %1832, 3, !dbg !75
  %1837 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1758, float %1759, float %1760, float %1761, i32 %.extract143, i32 %.extract145, i32 %.extract144, i32 %.extract146, i32 %1548, i32 %1549) #5, !dbg !75
  %1838 = extractvalue { float, float, float, float } %1837, 0, !dbg !75
  %1839 = extractvalue { float, float, float, float } %1837, 1, !dbg !75
  %1840 = extractvalue { float, float, float, float } %1837, 2, !dbg !75
  %1841 = extractvalue { float, float, float, float } %1837, 3, !dbg !75
  %1842 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1763, float %1764, float %1765, float %1766, i32 %.extract143, i32 %.extract145, i32 %.extract144, i32 %.extract146, i32 %1562, i32 %1563) #5, !dbg !75
  %1843 = extractvalue { float, float, float, float } %1842, 0, !dbg !75
  %1844 = extractvalue { float, float, float, float } %1842, 1, !dbg !75
  %1845 = extractvalue { float, float, float, float } %1842, 2, !dbg !75
  %1846 = extractvalue { float, float, float, float } %1842, 3, !dbg !75
  %1847 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1768, float %1769, float %1770, float %1771, i32 %.extract143, i32 %.extract145, i32 %.extract144, i32 %.extract146, i32 %1564, i32 %1565) #5, !dbg !75
  %1848 = extractvalue { float, float, float, float } %1847, 0, !dbg !75
  %1849 = extractvalue { float, float, float, float } %1847, 1, !dbg !75
  %1850 = extractvalue { float, float, float, float } %1847, 2, !dbg !75
  %1851 = extractvalue { float, float, float, float } %1847, 3, !dbg !75
  %1852 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1773, float %1774, float %1775, float %1776, i32 %.extract143, i32 %.extract145, i32 %.extract144, i32 %.extract146, i32 %1578, i32 %1579) #5, !dbg !75
  %1853 = extractvalue { float, float, float, float } %1852, 0, !dbg !75
  %1854 = extractvalue { float, float, float, float } %1852, 1, !dbg !75
  %1855 = extractvalue { float, float, float, float } %1852, 2, !dbg !75
  %1856 = extractvalue { float, float, float, float } %1852, 3, !dbg !75
  %1857 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1778, float %1779, float %1780, float %1781, i32 %.extract143, i32 %.extract145, i32 %.extract144, i32 %.extract146, i32 %1580, i32 %1581) #5, !dbg !75
  %1858 = extractvalue { float, float, float, float } %1857, 0, !dbg !75
  %1859 = extractvalue { float, float, float, float } %1857, 1, !dbg !75
  %1860 = extractvalue { float, float, float, float } %1857, 2, !dbg !75
  %1861 = extractvalue { float, float, float, float } %1857, 3, !dbg !75
  %1862 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1783, float %1784, float %1785, float %1786, i32 %.extract159, i32 %.extract161, i32 %.extract160, i32 %.extract162, i32 %1530, i32 %1531) #5, !dbg !75
  %1863 = extractvalue { float, float, float, float } %1862, 0, !dbg !75
  %1864 = extractvalue { float, float, float, float } %1862, 1, !dbg !75
  %1865 = extractvalue { float, float, float, float } %1862, 2, !dbg !75
  %1866 = extractvalue { float, float, float, float } %1862, 3, !dbg !75
  %1867 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1788, float %1789, float %1790, float %1791, i32 %.extract159, i32 %.extract161, i32 %.extract160, i32 %.extract162, i32 %1532, i32 %1533) #5, !dbg !75
  %1868 = extractvalue { float, float, float, float } %1867, 0, !dbg !75
  %1869 = extractvalue { float, float, float, float } %1867, 1, !dbg !75
  %1870 = extractvalue { float, float, float, float } %1867, 2, !dbg !75
  %1871 = extractvalue { float, float, float, float } %1867, 3, !dbg !75
  %1872 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1793, float %1794, float %1795, float %1796, i32 %.extract159, i32 %.extract161, i32 %.extract160, i32 %.extract162, i32 %1546, i32 %1547) #5, !dbg !75
  %1873 = extractvalue { float, float, float, float } %1872, 0, !dbg !75
  %1874 = extractvalue { float, float, float, float } %1872, 1, !dbg !75
  %1875 = extractvalue { float, float, float, float } %1872, 2, !dbg !75
  %1876 = extractvalue { float, float, float, float } %1872, 3, !dbg !75
  %1877 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1798, float %1799, float %1800, float %1801, i32 %.extract159, i32 %.extract161, i32 %.extract160, i32 %.extract162, i32 %1548, i32 %1549) #5, !dbg !75
  %1878 = extractvalue { float, float, float, float } %1877, 0, !dbg !75
  %1879 = extractvalue { float, float, float, float } %1877, 1, !dbg !75
  %1880 = extractvalue { float, float, float, float } %1877, 2, !dbg !75
  %1881 = extractvalue { float, float, float, float } %1877, 3, !dbg !75
  %1882 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1803, float %1804, float %1805, float %1806, i32 %.extract159, i32 %.extract161, i32 %.extract160, i32 %.extract162, i32 %1562, i32 %1563) #5, !dbg !75
  %1883 = extractvalue { float, float, float, float } %1882, 0, !dbg !75
  %1884 = extractvalue { float, float, float, float } %1882, 1, !dbg !75
  %1885 = extractvalue { float, float, float, float } %1882, 2, !dbg !75
  %1886 = extractvalue { float, float, float, float } %1882, 3, !dbg !75
  %1887 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1808, float %1809, float %1810, float %1811, i32 %.extract159, i32 %.extract161, i32 %.extract160, i32 %.extract162, i32 %1564, i32 %1565) #5, !dbg !75
  %1888 = extractvalue { float, float, float, float } %1887, 0, !dbg !75
  %1889 = extractvalue { float, float, float, float } %1887, 1, !dbg !75
  %1890 = extractvalue { float, float, float, float } %1887, 2, !dbg !75
  %1891 = extractvalue { float, float, float, float } %1887, 3, !dbg !75
  %1892 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1813, float %1814, float %1815, float %1816, i32 %.extract159, i32 %.extract161, i32 %.extract160, i32 %.extract162, i32 %1578, i32 %1579) #5, !dbg !75
  %1893 = extractvalue { float, float, float, float } %1892, 0, !dbg !75
  %1894 = extractvalue { float, float, float, float } %1892, 1, !dbg !75
  %1895 = extractvalue { float, float, float, float } %1892, 2, !dbg !75
  %1896 = extractvalue { float, float, float, float } %1892, 3, !dbg !75
  %1897 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1818, float %1819, float %1820, float %1821, i32 %.extract159, i32 %.extract161, i32 %.extract160, i32 %.extract162, i32 %1580, i32 %1581) #5, !dbg !75
  %1898 = extractvalue { float, float, float, float } %1897, 0, !dbg !75
  %1899 = extractvalue { float, float, float, float } %1897, 1, !dbg !75
  %1900 = extractvalue { float, float, float, float } %1897, 2, !dbg !75
  %1901 = extractvalue { float, float, float, float } %1897, 3, !dbg !75
  %1902 = fsub float %847, %1114, !dbg !68
  %1903 = fsub float %848, %1114, !dbg !68
  %1904 = fsub float %849, %1117, !dbg !68
  %1905 = fsub float %850, %1117, !dbg !68
  %1906 = fsub float %851, %1114, !dbg !68
  %1907 = fsub float %852, %1114, !dbg !68
  %1908 = fsub float %853, %1117, !dbg !68
  %1909 = fsub float %854, %1117, !dbg !68
  %1910 = fsub float %855, %1114, !dbg !68
  %1911 = fsub float %856, %1114, !dbg !68
  %1912 = fsub float %857, %1117, !dbg !68
  %1913 = fsub float %858, %1117, !dbg !68
  %1914 = fsub float %859, %1114, !dbg !68
  %1915 = fsub float %860, %1114, !dbg !68
  %1916 = fsub float %861, %1117, !dbg !68
  %1917 = fsub float %862, %1117, !dbg !68
  %1918 = fsub float %863, %1132, !dbg !68
  %1919 = fsub float %864, %1132, !dbg !68
  %1920 = fsub float %865, %1135, !dbg !68
  %1921 = fsub float %866, %1135, !dbg !68
  %1922 = fsub float %867, %1132, !dbg !68
  %1923 = fsub float %868, %1132, !dbg !68
  %1924 = fsub float %869, %1135, !dbg !68
  %1925 = fsub float %870, %1135, !dbg !68
  %1926 = fsub float %871, %1132, !dbg !68
  %1927 = fsub float %872, %1132, !dbg !68
  %1928 = fsub float %873, %1135, !dbg !68
  %1929 = fsub float %874, %1135, !dbg !68
  %1930 = fsub float %875, %1132, !dbg !68
  %1931 = fsub float %876, %1132, !dbg !68
  %1932 = fsub float %877, %1135, !dbg !68
  %1933 = fsub float %878, %1135, !dbg !68
  %1934 = fmul float %1902, 0x3FF7154760000000, !dbg !76
  %1935 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1934) #5, !dbg !76
  %1936 = fmul float %1903, 0x3FF7154760000000, !dbg !76
  %1937 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1936) #5, !dbg !76
  %1938 = fmul float %1904, 0x3FF7154760000000, !dbg !76
  %1939 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1938) #5, !dbg !76
  %1940 = fmul float %1905, 0x3FF7154760000000, !dbg !76
  %1941 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1940) #5, !dbg !76
  %1942 = fmul float %1906, 0x3FF7154760000000, !dbg !76
  %1943 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1942) #5, !dbg !76
  %1944 = fmul float %1907, 0x3FF7154760000000, !dbg !76
  %1945 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1944) #5, !dbg !76
  %1946 = fmul float %1908, 0x3FF7154760000000, !dbg !76
  %1947 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1946) #5, !dbg !76
  %1948 = fmul float %1909, 0x3FF7154760000000, !dbg !76
  %1949 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1948) #5, !dbg !76
  %1950 = fmul float %1910, 0x3FF7154760000000, !dbg !76
  %1951 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1950) #5, !dbg !76
  %1952 = fmul float %1911, 0x3FF7154760000000, !dbg !76
  %1953 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1952) #5, !dbg !76
  %1954 = fmul float %1912, 0x3FF7154760000000, !dbg !76
  %1955 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1954) #5, !dbg !76
  %1956 = fmul float %1913, 0x3FF7154760000000, !dbg !76
  %1957 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1956) #5, !dbg !76
  %1958 = fmul float %1914, 0x3FF7154760000000, !dbg !76
  %1959 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1958) #5, !dbg !76
  %1960 = fmul float %1915, 0x3FF7154760000000, !dbg !76
  %1961 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1960) #5, !dbg !76
  %1962 = fmul float %1916, 0x3FF7154760000000, !dbg !76
  %1963 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1962) #5, !dbg !76
  %1964 = fmul float %1917, 0x3FF7154760000000, !dbg !76
  %1965 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1964) #5, !dbg !76
  %1966 = fmul float %1918, 0x3FF7154760000000, !dbg !76
  %1967 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1966) #5, !dbg !76
  %1968 = fmul float %1919, 0x3FF7154760000000, !dbg !76
  %1969 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1968) #5, !dbg !76
  %1970 = fmul float %1920, 0x3FF7154760000000, !dbg !76
  %1971 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1970) #5, !dbg !76
  %1972 = fmul float %1921, 0x3FF7154760000000, !dbg !76
  %1973 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1972) #5, !dbg !76
  %1974 = fmul float %1922, 0x3FF7154760000000, !dbg !76
  %1975 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1974) #5, !dbg !76
  %1976 = fmul float %1923, 0x3FF7154760000000, !dbg !76
  %1977 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1976) #5, !dbg !76
  %1978 = fmul float %1924, 0x3FF7154760000000, !dbg !76
  %1979 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1978) #5, !dbg !76
  %1980 = fmul float %1925, 0x3FF7154760000000, !dbg !76
  %1981 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1980) #5, !dbg !76
  %1982 = fmul float %1926, 0x3FF7154760000000, !dbg !76
  %1983 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1982) #5, !dbg !76
  %1984 = fmul float %1927, 0x3FF7154760000000, !dbg !76
  %1985 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1984) #5, !dbg !76
  %1986 = fmul float %1928, 0x3FF7154760000000, !dbg !76
  %1987 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1986) #5, !dbg !76
  %1988 = fmul float %1929, 0x3FF7154760000000, !dbg !76
  %1989 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1988) #5, !dbg !76
  %1990 = fmul float %1930, 0x3FF7154760000000, !dbg !76
  %1991 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1990) #5, !dbg !76
  %1992 = fmul float %1931, 0x3FF7154760000000, !dbg !76
  %1993 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1992) #5, !dbg !76
  %1994 = fmul float %1932, 0x3FF7154760000000, !dbg !76
  %1995 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1994) #5, !dbg !76
  %1996 = fmul float %1933, 0x3FF7154760000000, !dbg !76
  %1997 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1996) #5, !dbg !76
  %1998 = insertelement <32 x float> poison, float %1223, i64 0, !dbg !77
  %1999 = insertelement <32 x float> %1998, float %1225, i64 1, !dbg !77
  %2000 = insertelement <32 x float> %1999, float %1227, i64 2, !dbg !77
  %2001 = insertelement <32 x float> %2000, float %1229, i64 3, !dbg !77
  %2002 = shufflevector <32 x float> %2001, <32 x float> poison, <32 x i32> <i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 2, i32 2, i32 3, i32 3, i32 2, i32 2, i32 3, i32 3, i32 2, i32 2, i32 3, i32 3>, !dbg !77
  %2003 = fmul <32 x float> %448, %2002, !dbg !77
  %2004 = insertelement <32 x float> poison, float %1935, i64 0, !dbg !78
  %2005 = insertelement <32 x float> %2004, float %1937, i64 1, !dbg !78
  %2006 = insertelement <32 x float> %2005, float %1939, i64 2, !dbg !78
  %2007 = insertelement <32 x float> %2006, float %1941, i64 3, !dbg !78
  %2008 = insertelement <32 x float> %2007, float %1943, i64 4, !dbg !78
  %2009 = insertelement <32 x float> %2008, float %1945, i64 5, !dbg !78
  %2010 = insertelement <32 x float> %2009, float %1947, i64 6, !dbg !78
  %2011 = insertelement <32 x float> %2010, float %1949, i64 7, !dbg !78
  %2012 = insertelement <32 x float> %2011, float %1951, i64 8, !dbg !78
  %2013 = insertelement <32 x float> %2012, float %1953, i64 9, !dbg !78
  %2014 = insertelement <32 x float> %2013, float %1955, i64 10, !dbg !78
  %2015 = insertelement <32 x float> %2014, float %1957, i64 11, !dbg !78
  %2016 = insertelement <32 x float> %2015, float %1959, i64 12, !dbg !78
  %2017 = insertelement <32 x float> %2016, float %1961, i64 13, !dbg !78
  %2018 = insertelement <32 x float> %2017, float %1963, i64 14, !dbg !78
  %2019 = insertelement <32 x float> %2018, float %1965, i64 15, !dbg !78
  %2020 = insertelement <32 x float> %2019, float %1967, i64 16, !dbg !78
  %2021 = insertelement <32 x float> %2020, float %1969, i64 17, !dbg !78
  %2022 = insertelement <32 x float> %2021, float %1971, i64 18, !dbg !78
  %2023 = insertelement <32 x float> %2022, float %1973, i64 19, !dbg !78
  %2024 = insertelement <32 x float> %2023, float %1975, i64 20, !dbg !78
  %2025 = insertelement <32 x float> %2024, float %1977, i64 21, !dbg !78
  %2026 = insertelement <32 x float> %2025, float %1979, i64 22, !dbg !78
  %2027 = insertelement <32 x float> %2026, float %1981, i64 23, !dbg !78
  %2028 = insertelement <32 x float> %2027, float %1983, i64 24, !dbg !78
  %2029 = insertelement <32 x float> %2028, float %1985, i64 25, !dbg !78
  %2030 = insertelement <32 x float> %2029, float %1987, i64 26, !dbg !78
  %2031 = insertelement <32 x float> %2030, float %1989, i64 27, !dbg !78
  %2032 = insertelement <32 x float> %2031, float %1991, i64 28, !dbg !78
  %2033 = insertelement <32 x float> %2032, float %1993, i64 29, !dbg !78
  %2034 = insertelement <32 x float> %2033, float %1995, i64 30, !dbg !78
  %2035 = insertelement <32 x float> %2034, float %1997, i64 31, !dbg !78
  %2036 = fadd <32 x float> %2003, %2035, !dbg !78
  %2037 = add i32 %381, 1, !dbg !42
  %2038 = icmp slt i32 %2037, 2, !dbg !42
  %2039 = select i1 %2038, i32 %2037, i32 0, !dbg !42
  %2040 = add nuw nsw i32 %446, 64, !dbg !42
  %2041 = or disjoint i32 %2040, %19, !dbg !43
  %2042 = or disjoint i32 %2040, %20, !dbg !43
  %2043 = icmp ult i32 %2041, 512, !dbg !79
  %2044 = icmp ult i32 %2042, 512, !dbg !79
  %2045 = shl i32 %2039, 13, !dbg !35
  %2046 = sext i32 %2045 to i64, !dbg !35
  %2047 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %2046, !dbg !35
  %2048 = getelementptr i16, ptr addrspace(3) %2047, i64 %99, !dbg !35
  %2049 = getelementptr i16, ptr addrspace(3) %2047, i64 %103, !dbg !35
  %2050 = getelementptr i16, ptr addrspace(3) %2047, i64 %107, !dbg !35
  %2051 = getelementptr i16, ptr addrspace(3) %2047, i64 %111, !dbg !35
  %2052 = getelementptr i16, ptr addrspace(3) %2047, i64 %115, !dbg !35
  %2053 = getelementptr i16, ptr addrspace(3) %2047, i64 %119, !dbg !35
  %2054 = getelementptr i16, ptr addrspace(3) %2047, i64 %123, !dbg !35
  %2055 = getelementptr i16, ptr addrspace(3) %2047, i64 %127, !dbg !35
  %2056 = select i1 %449, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %2048, ptr addrspace(1) %69, i32 %2056, i1 true) #5, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %2049, ptr addrspace(1) %71, i32 %2056, i1 true) #5, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %2050, ptr addrspace(1) %73, i32 %2056, i1 true) #5, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %2051, ptr addrspace(1) %75, i32 %2056, i1 true) #5, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %2052, ptr addrspace(1) %77, i32 %2056, i1 true) #5, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %2053, ptr addrspace(1) %79, i32 %2056, i1 true) #5, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %2054, ptr addrspace(1) %81, i32 %2056, i1 true) #5, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %2055, ptr addrspace(1) %83, i32 %2056, i1 true) #5, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #5, !dbg !35
  %2057 = shl nuw nsw i32 %2041, 6, !dbg !80
  %2058 = shl nuw nsw i32 %2042, 6, !dbg !80
  %2059 = add i32 %59, %2057, !dbg !37
  %2060 = add i32 %59, %2058, !dbg !37
  %2061 = sext i32 %2059 to i64, !dbg !38
  %2062 = getelementptr i16, ptr addrspace(1) %2, i64 %2061, !dbg !38
  %2063 = sext i32 %2060 to i64, !dbg !38
  %2064 = getelementptr i16, ptr addrspace(1) %2, i64 %2063, !dbg !38
  %2065 = shl i32 %2039, 11, !dbg !39
  %2066 = sext i32 %2065 to i64, !dbg !39
  %2067 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %2066, !dbg !39
  %2068 = and i1 %449, %2043, !dbg !42
  %2069 = and i1 %449, %2044, !dbg !42
  %2070 = getelementptr i16, ptr addrspace(3) %2067, i64 %99, !dbg !39
  %2071 = getelementptr i16, ptr addrspace(3) %2067, i64 %103, !dbg !39
  %2072 = select i1 %2068, i32 16, i32 0, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %2070, ptr addrspace(1) %2062, i32 %2072, i1 true) #5, !dbg !39
  %2073 = select i1 %2069, i32 16, i32 0, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %2071, ptr addrspace(1) %2064, i32 %2073, i1 true) #5, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #5, !dbg !39
  %2074 = getelementptr i16, ptr addrspace(1) %3, i64 %2061, !dbg !40
  %2075 = getelementptr i16, ptr addrspace(1) %3, i64 %2063, !dbg !40
  %2076 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %2066, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %2077 = getelementptr i16, ptr addrspace(3) %2076, i64 %99, !dbg !41
  %2078 = getelementptr i16, ptr addrspace(3) %2076, i64 %103, !dbg !41
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %2077, ptr addrspace(1) %2074, i32 %2072, i1 true) #5, !dbg !41
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %2078, ptr addrspace(1) %2075, i32 %2073, i1 true) #5, !dbg !41
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #5, !dbg !41
  %2079 = add i32 %380, 1, !dbg !42
  %2080 = icmp slt i32 %2079, 2, !dbg !42
  %2081 = select i1 %2080, i32 %2079, i32 0, !dbg !42
  %2082 = shl i32 %2081, 13, !dbg !35
  %2083 = sext i32 %2082 to i64, !dbg !35
  %2084 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %2083, !dbg !35
  %2085 = shl i32 %2081, 11, !dbg !39
  %2086 = sext i32 %2085 to i64, !dbg !39
  %2087 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %2086, !dbg !39
  tail call void asm sideeffect "cp.async.wait_group 0x3;", ""() #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %2088 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %2086, !dbg !41
  %2089 = add nuw nsw i32 %446, 32, !dbg !42
  %2090 = icmp ult i32 %446, 480, !dbg !42
  br i1 %2090, label %376, label %2091, !dbg !42

2091:                                             ; preds = %__nv_exp2f.exit196
  %2092 = shl i32 %12, 2, !dbg !17
  %2093 = and i32 %2092, 60, !dbg !17
  %2094 = lshr i32 %12, 4, !dbg !15
  %2095 = and i32 %2094, 7, !dbg !15
  %2096 = or disjoint i32 %2095, 120, !dbg !15
  %2097 = or disjoint i32 %11, %2096, !dbg !16
  %2098 = or disjoint i32 %2095, 112, !dbg !15
  %2099 = or disjoint i32 %11, %2098, !dbg !16
  %2100 = or disjoint i32 %2095, 104, !dbg !15
  %2101 = or disjoint i32 %11, %2100, !dbg !16
  %2102 = or disjoint i32 %2095, 96, !dbg !15
  %2103 = or disjoint i32 %11, %2102, !dbg !16
  %2104 = or disjoint i32 %2095, 88, !dbg !15
  %2105 = or disjoint i32 %11, %2104, !dbg !16
  %2106 = or disjoint i32 %2095, 80, !dbg !15
  %2107 = or disjoint i32 %11, %2106, !dbg !16
  %2108 = or disjoint i32 %2095, 72, !dbg !15
  %2109 = or disjoint i32 %11, %2108, !dbg !16
  %2110 = or disjoint i32 %2095, 64, !dbg !15
  %2111 = or disjoint i32 %11, %2110, !dbg !16
  %2112 = or disjoint i32 %2095, 56, !dbg !15
  %2113 = or disjoint i32 %11, %2112, !dbg !16
  %2114 = or disjoint i32 %2095, 48, !dbg !15
  %2115 = or disjoint i32 %11, %2114, !dbg !16
  %2116 = or disjoint i32 %2095, 40, !dbg !15
  %2117 = or disjoint i32 %11, %2116, !dbg !16
  %2118 = or disjoint i32 %2095, 32, !dbg !15
  %2119 = or disjoint i32 %11, %2118, !dbg !16
  %2120 = or disjoint i32 %2095, 24, !dbg !15
  %2121 = or disjoint i32 %11, %2120, !dbg !16
  %2122 = or disjoint i32 %2095, 16, !dbg !15
  %2123 = or disjoint i32 %11, %2122, !dbg !16
  %2124 = or disjoint i32 %2095, 8, !dbg !15
  %2125 = or disjoint i32 %11, %2124, !dbg !16
  %2126 = or disjoint i32 %11, %2095, !dbg !16
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %shift = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2127 = fadd <32 x float> %2036, %shift, !dbg !81
  %shift485 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2128 = fadd <32 x float> %2036, %shift485, !dbg !81
  %shift486 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2129 = fadd <32 x float> %shift486, %2127, !dbg !81
  %shift487 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2130 = fadd <32 x float> %shift487, %2129, !dbg !81
  %shift488 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2131 = fadd <32 x float> %shift488, %2128, !dbg !81
  %shift489 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2132 = fadd <32 x float> %shift489, %2131, !dbg !81
  %shift490 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2133 = fadd <32 x float> %shift490, %2130, !dbg !81
  %shift491 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 9, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2134 = fadd <32 x float> %shift491, %2133, !dbg !81
  %shift492 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 10, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2135 = fadd <32 x float> %shift492, %2132, !dbg !81
  %shift493 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 11, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2136 = fadd <32 x float> %shift493, %2135, !dbg !81
  %shift494 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 12, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2137 = fadd <32 x float> %shift494, %2134, !dbg !81
  %shift495 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 13, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2138 = fadd <32 x float> %shift495, %2137, !dbg !81
  %2139 = extractelement <32 x float> %2138, i64 0, !dbg !81
  %shift496 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 14, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2140 = fadd <32 x float> %shift496, %2136, !dbg !81
  %shift497 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2141 = fadd <32 x float> %shift497, %2140, !dbg !81
  %2142 = extractelement <32 x float> %2141, i64 2, !dbg !81
  %shift498 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2143 = fadd <32 x float> %2036, %shift498, !dbg !81
  %shift499 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 19, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2144 = fadd <32 x float> %2036, %shift499, !dbg !81
  %shift500 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 20, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2145 = fadd <32 x float> %shift500, %2143, !dbg !81
  %shift501 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 21, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2146 = fadd <32 x float> %shift501, %2145, !dbg !81
  %shift502 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 22, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2147 = fadd <32 x float> %shift502, %2144, !dbg !81
  %shift503 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 23, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2148 = fadd <32 x float> %shift503, %2147, !dbg !81
  %shift504 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 24, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2149 = fadd <32 x float> %shift504, %2146, !dbg !81
  %shift505 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 25, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2150 = fadd <32 x float> %shift505, %2149, !dbg !81
  %shift506 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 26, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2151 = fadd <32 x float> %shift506, %2148, !dbg !81
  %shift507 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 27, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2152 = fadd <32 x float> %shift507, %2151, !dbg !81
  %shift508 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 28, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2153 = fadd <32 x float> %shift508, %2150, !dbg !81
  %shift509 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 29, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2154 = fadd <32 x float> %shift509, %2153, !dbg !81
  %2155 = extractelement <32 x float> %2154, i64 16, !dbg !81
  %shift510 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 30, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2156 = fadd <32 x float> %shift510, %2152, !dbg !81
  %shift511 = shufflevector <32 x float> %2036, <32 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 31, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %2157 = fadd <32 x float> %shift511, %2156, !dbg !81
  %2158 = extractelement <32 x float> %2157, i64 18, !dbg !81
  %2159 = bitcast float %2139 to i32, !dbg !86
  %2160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2159, i32 2, i32 31), !dbg !86
  %2161 = bitcast i32 %2160 to float, !dbg !86
  %2162 = fadd float %2139, %2161, !dbg !81
  %2163 = bitcast float %2162 to i32, !dbg !86
  %2164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2163, i32 1, i32 31), !dbg !86
  %2165 = bitcast i32 %2164 to float, !dbg !86
  %2166 = fadd float %2162, %2165, !dbg !81
  %2167 = bitcast float %2142 to i32, !dbg !86
  %2168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2167, i32 2, i32 31), !dbg !86
  %2169 = bitcast i32 %2168 to float, !dbg !86
  %2170 = fadd float %2142, %2169, !dbg !81
  %2171 = bitcast float %2170 to i32, !dbg !86
  %2172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2171, i32 1, i32 31), !dbg !86
  %2173 = bitcast i32 %2172 to float, !dbg !86
  %2174 = fadd float %2170, %2173, !dbg !81
  %2175 = bitcast float %2155 to i32, !dbg !86
  %2176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2175, i32 2, i32 31), !dbg !86
  %2177 = bitcast i32 %2176 to float, !dbg !86
  %2178 = fadd float %2155, %2177, !dbg !81
  %2179 = bitcast float %2178 to i32, !dbg !86
  %2180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2179, i32 1, i32 31), !dbg !86
  %2181 = bitcast i32 %2180 to float, !dbg !86
  %2182 = fadd float %2178, %2181, !dbg !81
  %2183 = bitcast float %2158 to i32, !dbg !86
  %2184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2183, i32 2, i32 31), !dbg !86
  %2185 = bitcast i32 %2184 to float, !dbg !86
  %2186 = fadd float %2158, %2185, !dbg !81
  %2187 = bitcast float %2186 to i32, !dbg !86
  %2188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2187, i32 1, i32 31), !dbg !86
  %2189 = bitcast i32 %2188 to float, !dbg !86
  %2190 = fadd float %2186, %2189, !dbg !81
  %2191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1823, float %2166) #5, !dbg !87
  %2192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1824, float %2166) #5, !dbg !87
  %2193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1825, float %2174) #5, !dbg !87
  %2194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1826, float %2174) #5, !dbg !87
  %2195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1828, float %2166) #5, !dbg !87
  %2196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1829, float %2166) #5, !dbg !87
  %2197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1830, float %2174) #5, !dbg !87
  %2198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1831, float %2174) #5, !dbg !87
  %2199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1833, float %2166) #5, !dbg !87
  %2200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1834, float %2166) #5, !dbg !87
  %2201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1835, float %2174) #5, !dbg !87
  %2202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1836, float %2174) #5, !dbg !87
  %2203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1838, float %2166) #5, !dbg !87
  %2204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1839, float %2166) #5, !dbg !87
  %2205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1840, float %2174) #5, !dbg !87
  %2206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1841, float %2174) #5, !dbg !87
  %2207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1843, float %2166) #5, !dbg !87
  %2208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1844, float %2166) #5, !dbg !87
  %2209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1845, float %2174) #5, !dbg !87
  %2210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1846, float %2174) #5, !dbg !87
  %2211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1848, float %2166) #5, !dbg !87
  %2212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1849, float %2166) #5, !dbg !87
  %2213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1850, float %2174) #5, !dbg !87
  %2214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1851, float %2174) #5, !dbg !87
  %2215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1853, float %2166) #5, !dbg !87
  %2216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1854, float %2166) #5, !dbg !87
  %2217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1855, float %2174) #5, !dbg !87
  %2218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1856, float %2174) #5, !dbg !87
  %2219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1858, float %2166) #5, !dbg !87
  %2220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1859, float %2166) #5, !dbg !87
  %2221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1860, float %2174) #5, !dbg !87
  %2222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1861, float %2174) #5, !dbg !87
  %2223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1863, float %2182) #5, !dbg !87
  %2224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1864, float %2182) #5, !dbg !87
  %2225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1865, float %2190) #5, !dbg !87
  %2226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1866, float %2190) #5, !dbg !87
  %2227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1868, float %2182) #5, !dbg !87
  %2228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1869, float %2182) #5, !dbg !87
  %2229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1870, float %2190) #5, !dbg !87
  %2230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1871, float %2190) #5, !dbg !87
  %2231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1873, float %2182) #5, !dbg !87
  %2232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1874, float %2182) #5, !dbg !87
  %2233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1875, float %2190) #5, !dbg !87
  %2234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1876, float %2190) #5, !dbg !87
  %2235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1878, float %2182) #5, !dbg !87
  %2236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1879, float %2182) #5, !dbg !87
  %2237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1880, float %2190) #5, !dbg !87
  %2238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1881, float %2190) #5, !dbg !87
  %2239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1883, float %2182) #5, !dbg !87
  %2240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1884, float %2182) #5, !dbg !87
  %2241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1885, float %2190) #5, !dbg !87
  %2242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1886, float %2190) #5, !dbg !87
  %2243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1888, float %2182) #5, !dbg !87
  %2244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1889, float %2182) #5, !dbg !87
  %2245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1890, float %2190) #5, !dbg !87
  %2246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1891, float %2190) #5, !dbg !87
  %2247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1893, float %2182) #5, !dbg !87
  %2248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1894, float %2182) #5, !dbg !87
  %2249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1895, float %2190) #5, !dbg !87
  %2250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1896, float %2190) #5, !dbg !87
  %2251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1898, float %2182) #5, !dbg !87
  %2252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1899, float %2182) #5, !dbg !87
  %2253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1900, float %2190) #5, !dbg !87
  %2254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1901, float %2190) #5, !dbg !87
  %2255 = shl nsw i32 %2126, 6, !dbg !88
  %2256 = shl nsw i32 %2125, 6, !dbg !88
  %2257 = shl nsw i32 %2123, 6, !dbg !88
  %2258 = shl nsw i32 %2121, 6, !dbg !88
  %2259 = shl nsw i32 %2119, 6, !dbg !88
  %2260 = shl nsw i32 %2117, 6, !dbg !88
  %2261 = shl nsw i32 %2115, 6, !dbg !88
  %2262 = shl nsw i32 %2113, 6, !dbg !88
  %2263 = shl nsw i32 %2111, 6, !dbg !88
  %2264 = shl nsw i32 %2109, 6, !dbg !88
  %2265 = shl nsw i32 %2107, 6, !dbg !88
  %2266 = shl nsw i32 %2105, 6, !dbg !88
  %2267 = shl nsw i32 %2103, 6, !dbg !88
  %2268 = shl nsw i32 %2101, 6, !dbg !88
  %2269 = shl nsw i32 %2099, 6, !dbg !88
  %2270 = shl nsw i32 %2097, 6, !dbg !88
  %2271 = or disjoint i32 %58, %2093, !dbg !89
  %2272 = add nsw i32 %2271, %2255, !dbg !90
  %2273 = add nsw i32 %2271, %2256, !dbg !90
  %2274 = add nsw i32 %2271, %2257, !dbg !90
  %2275 = add nsw i32 %2271, %2258, !dbg !90
  %2276 = add nsw i32 %2271, %2259, !dbg !90
  %2277 = add nsw i32 %2271, %2260, !dbg !90
  %2278 = add nsw i32 %2271, %2261, !dbg !90
  %2279 = add nsw i32 %2271, %2262, !dbg !90
  %2280 = add nsw i32 %2271, %2263, !dbg !90
  %2281 = add nsw i32 %2271, %2264, !dbg !90
  %2282 = add nsw i32 %2271, %2265, !dbg !90
  %2283 = add nsw i32 %2271, %2266, !dbg !90
  %2284 = add nsw i32 %2271, %2267, !dbg !90
  %2285 = add nsw i32 %2271, %2268, !dbg !90
  %2286 = add nsw i32 %2271, %2269, !dbg !90
  %2287 = add nsw i32 %2271, %2270, !dbg !90
  %2288 = sext i32 %2272 to i64, !dbg !91
  %2289 = getelementptr float, ptr addrspace(1) %0, i64 %2288, !dbg !91
  %2290 = sext i32 %2273 to i64, !dbg !91
  %2291 = getelementptr float, ptr addrspace(1) %0, i64 %2290, !dbg !91
  %2292 = sext i32 %2274 to i64, !dbg !91
  %2293 = getelementptr float, ptr addrspace(1) %0, i64 %2292, !dbg !91
  %2294 = sext i32 %2275 to i64, !dbg !91
  %2295 = getelementptr float, ptr addrspace(1) %0, i64 %2294, !dbg !91
  %2296 = sext i32 %2276 to i64, !dbg !91
  %2297 = getelementptr float, ptr addrspace(1) %0, i64 %2296, !dbg !91
  %2298 = sext i32 %2277 to i64, !dbg !91
  %2299 = getelementptr float, ptr addrspace(1) %0, i64 %2298, !dbg !91
  %2300 = sext i32 %2278 to i64, !dbg !91
  %2301 = getelementptr float, ptr addrspace(1) %0, i64 %2300, !dbg !91
  %2302 = sext i32 %2279 to i64, !dbg !91
  %2303 = getelementptr float, ptr addrspace(1) %0, i64 %2302, !dbg !91
  %2304 = sext i32 %2280 to i64, !dbg !91
  %2305 = getelementptr float, ptr addrspace(1) %0, i64 %2304, !dbg !91
  %2306 = sext i32 %2281 to i64, !dbg !91
  %2307 = getelementptr float, ptr addrspace(1) %0, i64 %2306, !dbg !91
  %2308 = sext i32 %2282 to i64, !dbg !91
  %2309 = getelementptr float, ptr addrspace(1) %0, i64 %2308, !dbg !91
  %2310 = sext i32 %2283 to i64, !dbg !91
  %2311 = getelementptr float, ptr addrspace(1) %0, i64 %2310, !dbg !91
  %2312 = sext i32 %2284 to i64, !dbg !91
  %2313 = getelementptr float, ptr addrspace(1) %0, i64 %2312, !dbg !91
  %2314 = sext i32 %2285 to i64, !dbg !91
  %2315 = getelementptr float, ptr addrspace(1) %0, i64 %2314, !dbg !91
  %2316 = sext i32 %2286 to i64, !dbg !91
  %2317 = getelementptr float, ptr addrspace(1) %0, i64 %2316, !dbg !91
  %2318 = sext i32 %2287 to i64, !dbg !91
  %2319 = getelementptr float, ptr addrspace(1) %0, i64 %2318, !dbg !91
  %2320 = mul nuw nsw i32 %177, 68, !dbg !92
  %2321 = add nuw nsw i32 %2320, %49, !dbg !92
  %2322 = zext nneg i32 %2321 to i64, !dbg !92
  %2323 = getelementptr float, ptr addrspace(3) @global_smem, i64 %2322, !dbg !92
  %2324 = insertelement <2 x float> poison, float %2191, i64 0, !dbg !92
  %2325 = insertelement <2 x float> %2324, float %2192, i64 1, !dbg !92
  store <2 x float> %2325, ptr addrspace(3) %2323, align 8, !dbg !92
  %2326 = add nuw nsw i32 %2320, 544, !dbg !92
  %2327 = add nuw nsw i32 %2326, %49, !dbg !92
  %2328 = zext nneg i32 %2327 to i64, !dbg !92
  %2329 = getelementptr float, ptr addrspace(3) @global_smem, i64 %2328, !dbg !92
  %2330 = insertelement <2 x float> poison, float %2193, i64 0, !dbg !92
  %2331 = insertelement <2 x float> %2330, float %2194, i64 1, !dbg !92
  store <2 x float> %2331, ptr addrspace(3) %2329, align 8, !dbg !92
  %2332 = add nuw nsw i32 %2320, %186, !dbg !92
  %2333 = zext nneg i32 %2332 to i64, !dbg !92
  %2334 = getelementptr float, ptr addrspace(3) @global_smem, i64 %2333, !dbg !92
  %2335 = insertelement <2 x float> poison, float %2195, i64 0, !dbg !92
  %2336 = insertelement <2 x float> %2335, float %2196, i64 1, !dbg !92
  store <2 x float> %2336, ptr addrspace(3) %2334, align 8, !dbg !92
  %2337 = add nuw nsw i32 %2326, %186, !dbg !92
  %2338 = zext nneg i32 %2337 to i64, !dbg !92
  %2339 = getelementptr float, ptr addrspace(3) @global_smem, i64 %2338, !dbg !92
  %2340 = insertelement <2 x float> poison, float %2197, i64 0, !dbg !92
  %2341 = insertelement <2 x float> %2340, float %2198, i64 1, !dbg !92
  store <2 x float> %2341, ptr addrspace(3) %2339, align 8, !dbg !92
  %2342 = add nuw nsw i32 %2320, %193, !dbg !92
  %2343 = zext nneg i32 %2342 to i64, !dbg !92
  %2344 = getelementptr float, ptr addrspace(3) @global_smem, i64 %2343, !dbg !92
  %2345 = insertelement <2 x float> poison, float %2199, i64 0, !dbg !92
  %2346 = insertelement <2 x float> %2345, float %2200, i64 1, !dbg !92
  store <2 x float> %2346, ptr addrspace(3) %2344, align 8, !dbg !92
  %2347 = add nuw nsw i32 %2326, %193, !dbg !92
  %2348 = zext nneg i32 %2347 to i64, !dbg !92
  %2349 = getelementptr float, ptr addrspace(3) @global_smem, i64 %2348, !dbg !92
  %2350 = insertelement <2 x float> poison, float %2201, i64 0, !dbg !92
  %2351 = insertelement <2 x float> %2350, float %2202, i64 1, !dbg !92
  store <2 x float> %2351, ptr addrspace(3) %2349, align 8, !dbg !92
  %2352 = add nuw nsw i32 %2320, %200, !dbg !92
  %2353 = zext nneg i32 %2352 to i64, !dbg !92
  %2354 = getelementptr float, ptr addrspace(3) @global_smem, i64 %2353, !dbg !92
  %2355 = insertelement <2 x float> poison, float %2203, i64 0, !dbg !92
  %2356 = insertelement <2 x float> %2355, float %2204, i64 1, !dbg !92
  store <2 x float> %2356, ptr addrspace(3) %2354, align 8, !dbg !92
  %2357 = add nuw nsw i32 %2326, %200, !dbg !92
  %2358 = zext nneg i32 %2357 to i64, !dbg !92
  %2359 = getelementptr float, ptr addrspace(3) @global_smem, i64 %2358, !dbg !92
  %2360 = insertelement <2 x float> poison, float %2205, i64 0, !dbg !92
  %2361 = insertelement <2 x float> %2360, float %2206, i64 1, !dbg !92
  store <2 x float> %2361, ptr addrspace(3) %2359, align 8, !dbg !92
  %2362 = or disjoint i32 %49, 32, !dbg !92
  %2363 = add nuw nsw i32 %2320, %2362, !dbg !92
  %2364 = zext nneg i32 %2363 to i64, !dbg !92
  %2365 = getelementptr float, ptr addrspace(3) @global_smem, i64 %2364, !dbg !92
  %2366 = insertelement <2 x float> poison, float %2207, i64 0, !dbg !92
  %2367 = insertelement <2 x float> %2366, float %2208, i64 1, !dbg !92
  store <2 x float> %2367, ptr addrspace(3) %2365, align 8, !dbg !92
  %2368 = add nuw nsw i32 %2326, %2362, !dbg !92
  %2369 = zext nneg i32 %2368 to i64, !dbg !92
  %2370 = getelementptr float, ptr addrspace(3) @global_smem, i64 %2369, !dbg !92
  %2371 = insertelement <2 x float> poison, float %2209, i64 0, !dbg !92
  %2372 = insertelement <2 x float> %2371, float %2210, i64 1, !dbg !92
  store <2 x float> %2372, ptr addrspace(3) %2370, align 8, !dbg !92
  %2373 = or disjoint i32 %49, 40, !dbg !92
  %2374 = add nuw nsw i32 %2320, %2373, !dbg !92
  %2375 = zext nneg i32 %2374 to i64, !dbg !92
  %2376 = getelementptr float, ptr addrspace(3) @global_smem, i64 %2375, !dbg !92
  %2377 = insertelement <2 x float> poison, float %2211, i64 0, !dbg !92
  %2378 = insertelement <2 x float> %2377, float %2212, i64 1, !dbg !92
  store <2 x float> %2378, ptr addrspace(3) %2376, align 8, !dbg !92
  %2379 = add nuw nsw i32 %2326, %2373, !dbg !92
  %2380 = zext nneg i32 %2379 to i64, !dbg !92
  %2381 = getelementptr float, ptr addrspace(3) @global_smem, i64 %2380, !dbg !92
  %2382 = insertelement <2 x float> poison, float %2213, i64 0, !dbg !92
  %2383 = insertelement <2 x float> %2382, float %2214, i64 1, !dbg !92
  store <2 x float> %2383, ptr addrspace(3) %2381, align 8, !dbg !92
  %2384 = or disjoint i32 %49, 48, !dbg !92
  %2385 = add nuw nsw i32 %2320, %2384, !dbg !92
  %2386 = zext nneg i32 %2385 to i64, !dbg !92
  %2387 = getelementptr float, ptr addrspace(3) @global_smem, i64 %2386, !dbg !92
  %2388 = insertelement <2 x float> poison, float %2215, i64 0, !dbg !92
  %2389 = insertelement <2 x float> %2388, float %2216, i64 1, !dbg !92
  store <2 x float> %2389, ptr addrspace(3) %2387, align 8, !dbg !92
  %2390 = add nuw nsw i32 %2326, %2384, !dbg !92
  %2391 = zext nneg i32 %2390 to i64, !dbg !92
  %2392 = getelementptr float, ptr addrspace(3) @global_smem, i64 %2391, !dbg !92
  %2393 = insertelement <2 x float> poison, float %2217, i64 0, !dbg !92
  %2394 = insertelement <2 x float> %2393, float %2218, i64 1, !dbg !92
  store <2 x float> %2394, ptr addrspace(3) %2392, align 8, !dbg !92
  %2395 = or disjoint i32 %49, 56, !dbg !92
  %2396 = add nuw nsw i32 %2320, %2395, !dbg !92
  %2397 = zext nneg i32 %2396 to i64, !dbg !92
  %2398 = getelementptr float, ptr addrspace(3) @global_smem, i64 %2397, !dbg !92
  %2399 = insertelement <2 x float> poison, float %2219, i64 0, !dbg !92
  %2400 = insertelement <2 x float> %2399, float %2220, i64 1, !dbg !92
  store <2 x float> %2400, ptr addrspace(3) %2398, align 8, !dbg !92
  %2401 = add nuw nsw i32 %2326, %2395, !dbg !92
  %2402 = zext nneg i32 %2401 to i64, !dbg !92
  %2403 = getelementptr float, ptr addrspace(3) @global_smem, i64 %2402, !dbg !92
  %2404 = insertelement <2 x float> poison, float %2221, i64 0, !dbg !92
  %2405 = insertelement <2 x float> %2404, float %2222, i64 1, !dbg !92
  store <2 x float> %2405, ptr addrspace(3) %2403, align 8, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %2406 = add nuw nsw i32 %209, %2093, !dbg !92
  %2407 = zext nneg i32 %2406 to i64, !dbg !92
  %2408 = getelementptr float, ptr addrspace(3) @global_smem, i64 %2407, !dbg !92
  %2409 = load <4 x i32>, ptr addrspace(3) %2408, align 16, !dbg !92
  %2410 = getelementptr i8, ptr addrspace(3) %2408, i64 2176, !dbg !92
  %2411 = load <4 x i32>, ptr addrspace(3) %2410, align 16, !dbg !92
  %2412 = getelementptr i8, ptr addrspace(3) %2408, i64 4352, !dbg !92
  %2413 = load <4 x i32>, ptr addrspace(3) %2412, align 16, !dbg !92
  %2414 = getelementptr i8, ptr addrspace(3) %2408, i64 6528, !dbg !92
  %2415 = load <4 x i32>, ptr addrspace(3) %2414, align 16, !dbg !92
  %2416 = getelementptr i8, ptr addrspace(3) %2408, i64 8704, !dbg !92
  %2417 = load <4 x i32>, ptr addrspace(3) %2416, align 16, !dbg !92
  %2418 = getelementptr i8, ptr addrspace(3) %2408, i64 10880, !dbg !92
  %2419 = load <4 x i32>, ptr addrspace(3) %2418, align 16, !dbg !92
  %2420 = getelementptr i8, ptr addrspace(3) %2408, i64 13056, !dbg !92
  %2421 = load <4 x i32>, ptr addrspace(3) %2420, align 16, !dbg !92
  %2422 = getelementptr i8, ptr addrspace(3) %2408, i64 15232, !dbg !92
  %2423 = load <4 x i32>, ptr addrspace(3) %2422, align 16, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %2424 = insertelement <2 x float> poison, float %2223, i64 0, !dbg !92
  %2425 = insertelement <2 x float> %2424, float %2224, i64 1, !dbg !92
  store <2 x float> %2425, ptr addrspace(3) %2323, align 8, !dbg !92
  %2426 = insertelement <2 x float> poison, float %2225, i64 0, !dbg !92
  %2427 = insertelement <2 x float> %2426, float %2226, i64 1, !dbg !92
  store <2 x float> %2427, ptr addrspace(3) %2329, align 8, !dbg !92
  %2428 = insertelement <2 x float> poison, float %2227, i64 0, !dbg !92
  %2429 = insertelement <2 x float> %2428, float %2228, i64 1, !dbg !92
  store <2 x float> %2429, ptr addrspace(3) %2334, align 8, !dbg !92
  %2430 = insertelement <2 x float> poison, float %2229, i64 0, !dbg !92
  %2431 = insertelement <2 x float> %2430, float %2230, i64 1, !dbg !92
  store <2 x float> %2431, ptr addrspace(3) %2339, align 8, !dbg !92
  %2432 = insertelement <2 x float> poison, float %2231, i64 0, !dbg !92
  %2433 = insertelement <2 x float> %2432, float %2232, i64 1, !dbg !92
  store <2 x float> %2433, ptr addrspace(3) %2344, align 8, !dbg !92
  %2434 = insertelement <2 x float> poison, float %2233, i64 0, !dbg !92
  %2435 = insertelement <2 x float> %2434, float %2234, i64 1, !dbg !92
  store <2 x float> %2435, ptr addrspace(3) %2349, align 8, !dbg !92
  %2436 = insertelement <2 x float> poison, float %2235, i64 0, !dbg !92
  %2437 = insertelement <2 x float> %2436, float %2236, i64 1, !dbg !92
  store <2 x float> %2437, ptr addrspace(3) %2354, align 8, !dbg !92
  %2438 = insertelement <2 x float> poison, float %2237, i64 0, !dbg !92
  %2439 = insertelement <2 x float> %2438, float %2238, i64 1, !dbg !92
  store <2 x float> %2439, ptr addrspace(3) %2359, align 8, !dbg !92
  %2440 = insertelement <2 x float> poison, float %2239, i64 0, !dbg !92
  %2441 = insertelement <2 x float> %2440, float %2240, i64 1, !dbg !92
  store <2 x float> %2441, ptr addrspace(3) %2365, align 8, !dbg !92
  %2442 = insertelement <2 x float> poison, float %2241, i64 0, !dbg !92
  %2443 = insertelement <2 x float> %2442, float %2242, i64 1, !dbg !92
  store <2 x float> %2443, ptr addrspace(3) %2370, align 8, !dbg !92
  %2444 = insertelement <2 x float> poison, float %2243, i64 0, !dbg !92
  %2445 = insertelement <2 x float> %2444, float %2244, i64 1, !dbg !92
  store <2 x float> %2445, ptr addrspace(3) %2376, align 8, !dbg !92
  %2446 = insertelement <2 x float> poison, float %2245, i64 0, !dbg !92
  %2447 = insertelement <2 x float> %2446, float %2246, i64 1, !dbg !92
  store <2 x float> %2447, ptr addrspace(3) %2381, align 8, !dbg !92
  %2448 = insertelement <2 x float> poison, float %2247, i64 0, !dbg !92
  %2449 = insertelement <2 x float> %2448, float %2248, i64 1, !dbg !92
  store <2 x float> %2449, ptr addrspace(3) %2387, align 8, !dbg !92
  %2450 = insertelement <2 x float> poison, float %2249, i64 0, !dbg !92
  %2451 = insertelement <2 x float> %2450, float %2250, i64 1, !dbg !92
  store <2 x float> %2451, ptr addrspace(3) %2392, align 8, !dbg !92
  %2452 = insertelement <2 x float> poison, float %2251, i64 0, !dbg !92
  %2453 = insertelement <2 x float> %2452, float %2252, i64 1, !dbg !92
  store <2 x float> %2453, ptr addrspace(3) %2398, align 8, !dbg !92
  %2454 = insertelement <2 x float> poison, float %2253, i64 0, !dbg !92
  %2455 = insertelement <2 x float> %2454, float %2254, i64 1, !dbg !92
  store <2 x float> %2455, ptr addrspace(3) %2403, align 8, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %2456 = load <4 x i32>, ptr addrspace(3) %2408, align 16, !dbg !92
  %2457 = load <4 x i32>, ptr addrspace(3) %2410, align 16, !dbg !92
  %2458 = load <4 x i32>, ptr addrspace(3) %2412, align 16, !dbg !92
  %2459 = load <4 x i32>, ptr addrspace(3) %2414, align 16, !dbg !92
  %2460 = load <4 x i32>, ptr addrspace(3) %2416, align 16, !dbg !92
  %2461 = load <4 x i32>, ptr addrspace(3) %2418, align 16, !dbg !92
  %2462 = load <4 x i32>, ptr addrspace(3) %2420, align 16, !dbg !92
  %2463 = load <4 x i32>, ptr addrspace(3) %2422, align 16, !dbg !92
  %.extract = extractelement <4 x i32> %2409, i64 0, !dbg !92
  %.extract6 = extractelement <4 x i32> %2409, i64 1, !dbg !92
  %.extract8 = extractelement <4 x i32> %2409, i64 2, !dbg !92
  %.extract10 = extractelement <4 x i32> %2409, i64 3, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract6, i32 %.extract8, i32 %.extract10, ptr addrspace(1) %2289, i1 true) #5, !dbg !92
  %.extract12 = extractelement <4 x i32> %2411, i64 0, !dbg !92
  %.extract14 = extractelement <4 x i32> %2411, i64 1, !dbg !92
  %.extract16 = extractelement <4 x i32> %2411, i64 2, !dbg !92
  %.extract18 = extractelement <4 x i32> %2411, i64 3, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract14, i32 %.extract16, i32 %.extract18, ptr addrspace(1) %2291, i1 true) #5, !dbg !92
  %.extract20 = extractelement <4 x i32> %2413, i64 0, !dbg !92
  %.extract22 = extractelement <4 x i32> %2413, i64 1, !dbg !92
  %.extract24 = extractelement <4 x i32> %2413, i64 2, !dbg !92
  %.extract26 = extractelement <4 x i32> %2413, i64 3, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract20, i32 %.extract22, i32 %.extract24, i32 %.extract26, ptr addrspace(1) %2293, i1 true) #5, !dbg !92
  %.extract28 = extractelement <4 x i32> %2415, i64 0, !dbg !92
  %.extract30 = extractelement <4 x i32> %2415, i64 1, !dbg !92
  %.extract32 = extractelement <4 x i32> %2415, i64 2, !dbg !92
  %.extract34 = extractelement <4 x i32> %2415, i64 3, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract28, i32 %.extract30, i32 %.extract32, i32 %.extract34, ptr addrspace(1) %2295, i1 true) #5, !dbg !92
  %.extract36 = extractelement <4 x i32> %2417, i64 0, !dbg !92
  %.extract38 = extractelement <4 x i32> %2417, i64 1, !dbg !92
  %.extract40 = extractelement <4 x i32> %2417, i64 2, !dbg !92
  %.extract42 = extractelement <4 x i32> %2417, i64 3, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract36, i32 %.extract38, i32 %.extract40, i32 %.extract42, ptr addrspace(1) %2297, i1 true) #5, !dbg !92
  %.extract44 = extractelement <4 x i32> %2419, i64 0, !dbg !92
  %.extract46 = extractelement <4 x i32> %2419, i64 1, !dbg !92
  %.extract48 = extractelement <4 x i32> %2419, i64 2, !dbg !92
  %.extract50 = extractelement <4 x i32> %2419, i64 3, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract44, i32 %.extract46, i32 %.extract48, i32 %.extract50, ptr addrspace(1) %2299, i1 true) #5, !dbg !92
  %.extract52 = extractelement <4 x i32> %2421, i64 0, !dbg !92
  %.extract54 = extractelement <4 x i32> %2421, i64 1, !dbg !92
  %.extract56 = extractelement <4 x i32> %2421, i64 2, !dbg !92
  %.extract58 = extractelement <4 x i32> %2421, i64 3, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract52, i32 %.extract54, i32 %.extract56, i32 %.extract58, ptr addrspace(1) %2301, i1 true) #5, !dbg !92
  %.extract60 = extractelement <4 x i32> %2423, i64 0, !dbg !92
  %.extract62 = extractelement <4 x i32> %2423, i64 1, !dbg !92
  %.extract64 = extractelement <4 x i32> %2423, i64 2, !dbg !92
  %.extract66 = extractelement <4 x i32> %2423, i64 3, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract60, i32 %.extract62, i32 %.extract64, i32 %.extract66, ptr addrspace(1) %2303, i1 true) #5, !dbg !92
  %.extract68 = extractelement <4 x i32> %2456, i64 0, !dbg !92
  %.extract70 = extractelement <4 x i32> %2456, i64 1, !dbg !92
  %.extract72 = extractelement <4 x i32> %2456, i64 2, !dbg !92
  %.extract74 = extractelement <4 x i32> %2456, i64 3, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract68, i32 %.extract70, i32 %.extract72, i32 %.extract74, ptr addrspace(1) %2305, i1 true) #5, !dbg !92
  %.extract76 = extractelement <4 x i32> %2457, i64 0, !dbg !92
  %.extract78 = extractelement <4 x i32> %2457, i64 1, !dbg !92
  %.extract80 = extractelement <4 x i32> %2457, i64 2, !dbg !92
  %.extract82 = extractelement <4 x i32> %2457, i64 3, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract76, i32 %.extract78, i32 %.extract80, i32 %.extract82, ptr addrspace(1) %2307, i1 true) #5, !dbg !92
  %.extract84 = extractelement <4 x i32> %2458, i64 0, !dbg !92
  %.extract86 = extractelement <4 x i32> %2458, i64 1, !dbg !92
  %.extract88 = extractelement <4 x i32> %2458, i64 2, !dbg !92
  %.extract90 = extractelement <4 x i32> %2458, i64 3, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract84, i32 %.extract86, i32 %.extract88, i32 %.extract90, ptr addrspace(1) %2309, i1 true) #5, !dbg !92
  %.extract92 = extractelement <4 x i32> %2459, i64 0, !dbg !92
  %.extract94 = extractelement <4 x i32> %2459, i64 1, !dbg !92
  %.extract96 = extractelement <4 x i32> %2459, i64 2, !dbg !92
  %.extract98 = extractelement <4 x i32> %2459, i64 3, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract92, i32 %.extract94, i32 %.extract96, i32 %.extract98, ptr addrspace(1) %2311, i1 true) #5, !dbg !92
  %.extract100 = extractelement <4 x i32> %2460, i64 0, !dbg !92
  %.extract102 = extractelement <4 x i32> %2460, i64 1, !dbg !92
  %.extract104 = extractelement <4 x i32> %2460, i64 2, !dbg !92
  %.extract106 = extractelement <4 x i32> %2460, i64 3, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract100, i32 %.extract102, i32 %.extract104, i32 %.extract106, ptr addrspace(1) %2313, i1 true) #5, !dbg !92
  %.extract108 = extractelement <4 x i32> %2461, i64 0, !dbg !92
  %.extract110 = extractelement <4 x i32> %2461, i64 1, !dbg !92
  %.extract112 = extractelement <4 x i32> %2461, i64 2, !dbg !92
  %.extract114 = extractelement <4 x i32> %2461, i64 3, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract108, i32 %.extract110, i32 %.extract112, i32 %.extract114, ptr addrspace(1) %2315, i1 true) #5, !dbg !92
  %.extract116 = extractelement <4 x i32> %2462, i64 0, !dbg !92
  %.extract118 = extractelement <4 x i32> %2462, i64 1, !dbg !92
  %.extract120 = extractelement <4 x i32> %2462, i64 2, !dbg !92
  %.extract122 = extractelement <4 x i32> %2462, i64 3, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract116, i32 %.extract118, i32 %.extract120, i32 %.extract122, ptr addrspace(1) %2317, i1 true) #5, !dbg !92
  %.extract124 = extractelement <4 x i32> %2463, i64 0, !dbg !92
  %.extract126 = extractelement <4 x i32> %2463, i64 1, !dbg !92
  %.extract128 = extractelement <4 x i32> %2463, i64 2, !dbg !92
  %.extract130 = extractelement <4 x i32> %2463, i64 3, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract124, i32 %.extract126, i32 %.extract128, i32 %.extract130, ptr addrspace(1) %2319, i1 true) #5, !dbg !92
  ret void, !dbg !93
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwhym3olocjmgmxp2aiwrvswsmljq3ahbxjufmfqgyc6aodf63db.py", directory: "/work/06112/byou/ls6/torchinductor_cache/wh")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 24, scope: !7)
!11 = !DILocation(line: 23, column: 17, scope: !7)
!12 = !DILocation(line: 23, column: 28, scope: !7)
!13 = !DILocation(line: 24, column: 28, scope: !7)
!14 = !DILocation(line: 26, column: 20, scope: !7)
!15 = !DILocation(line: 27, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 20, scope: !7)
!17 = !DILocation(line: 28, column: 22, scope: !7)
!18 = !DILocation(line: 35, column: 25, scope: !7)
!19 = !DILocation(line: 48, column: 58, scope: !7)
!20 = !DILocation(line: 48, column: 79, scope: !7)
!21 = !DILocation(line: 48, column: 54, scope: !7)
!22 = !DILocation(line: 48, column: 73, scope: !7)
!23 = !DILocation(line: 48, column: 38, scope: !7)
!24 = !DILocation(line: 59, column: 20, scope: !7)
!25 = !DILocation(line: 60, column: 25, scope: !7)
!26 = !DILocation(line: 62, column: 24, scope: !7)
!27 = !DILocation(line: 64, column: 24, scope: !7)
!28 = !DILocation(line: 65, column: 17, scope: !7)
!29 = !DILocation(line: 73, column: 26, scope: !7)
!30 = !DILocation(line: 73, column: 21, scope: !7)
!31 = !DILocation(line: 74, column: 25, scope: !7)
!32 = !DILocation(line: 75, column: 24, scope: !7)
!33 = !DILocation(line: 76, column: 24, scope: !7)
!34 = !DILocation(line: 77, column: 17, scope: !7)
!35 = !DILocation(line: 48, column: 84, scope: !7)
!36 = !DILocation(line: 49, column: 54, scope: !7)
!37 = !DILocation(line: 49, column: 73, scope: !7)
!38 = !DILocation(line: 49, column: 38, scope: !7)
!39 = !DILocation(line: 49, column: 84, scope: !7)
!40 = !DILocation(line: 55, column: 35, scope: !7)
!41 = !DILocation(line: 55, column: 81, scope: !7)
!42 = !DILocation(line: 36, column: 33, scope: !7)
!43 = !DILocation(line: 37, column: 27, scope: !7)
!44 = !DILocation(line: 52, column: 32, scope: !7)
!45 = !DILocation(line: 57, column: 22, scope: !7)
!46 = !DILocation(line: 66, column: 31, scope: !7)
!47 = !DILocation(line: 67, column: 32, scope: !7)
!48 = !DILocation(line: 68, column: 25, scope: !7)
!49 = !DILocation(line: 69, column: 24, scope: !7)
!50 = !DILocation(line: 70, column: 23, scope: !7)
!51 = !DILocation(line: 82, column: 15, scope: !52, inlinedAt: !55)
!52 = distinct !DILexicalBlockFile(scope: !54, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/work/06112/byou/shared/miniforge3/envs/torch-2.5/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!55 = !DILocation(line: 71, column: 43, scope: !7)
!56 = !DILocation(line: 84, column: 21, scope: !52, inlinedAt: !55)
!57 = !DILocation(line: 84, column: 16, scope: !52, inlinedAt: !55)
!58 = !DILocation(line: 85, column: 29, scope: !52, inlinedAt: !55)
!59 = !DILocation(line: 95, column: 29, scope: !54, inlinedAt: !55)
!60 = !DILocation(line: 84, column: 21, scope: !54, inlinedAt: !61)
!61 = !DILocation(line: 72, column: 46, scope: !7)
!62 = !DILocation(line: 82, column: 15, scope: !54, inlinedAt: !61)
!63 = !DILocation(line: 84, column: 16, scope: !54, inlinedAt: !61)
!64 = !DILocation(line: 85, column: 29, scope: !54, inlinedAt: !61)
!65 = !DILocation(line: 78, column: 31, scope: !7)
!66 = !DILocation(line: 79, column: 24, scope: !7)
!67 = !DILocation(line: 80, column: 23, scope: !7)
!68 = !DILocation(line: 93, column: 24, scope: !7)
!69 = !DILocation(line: 81, column: 24, scope: !7)
!70 = !DILocation(line: 82, column: 28, scope: !7)
!71 = !DILocation(line: 87, column: 24, scope: !7)
!72 = !DILocation(line: 88, column: 28, scope: !7)
!73 = !DILocation(line: 89, column: 24, scope: !7)
!74 = !DILocation(line: 83, column: 25, scope: !7)
!75 = !DILocation(line: 86, column: 30, scope: !7)
!76 = !DILocation(line: 94, column: 28, scope: !7)
!77 = !DILocation(line: 96, column: 25, scope: !7)
!78 = !DILocation(line: 98, column: 25, scope: !7)
!79 = !DILocation(line: 38, column: 25, scope: !7)
!80 = !DILocation(line: 49, column: 58, scope: !7)
!81 = !DILocation(line: 256, column: 15, scope: !82, inlinedAt: !85)
!82 = distinct !DILexicalBlockFile(scope: !84, file: !83, discriminator: 0)
!83 = !DIFile(filename: "standard.py", directory: "/work/06112/byou/shared/miniforge3/envs/torch-2.5/lib/python3.12/site-packages/triton/language")
!84 = distinct !DILexicalBlockFile(scope: !7, file: !83, discriminator: 0)
!85 = !DILocation(line: 101, column: 27, scope: !7)
!86 = !DILocation(line: 267, column: 36, scope: !84, inlinedAt: !85)
!87 = !DILocation(line: 102, column: 20, scope: !7)
!88 = !DILocation(line: 103, column: 48, scope: !7)
!89 = !DILocation(line: 103, column: 44, scope: !7)
!90 = !DILocation(line: 103, column: 63, scope: !7)
!91 = !DILocation(line: 103, column: 28, scope: !7)
!92 = !DILocation(line: 103, column: 81, scope: !7)
!93 = !DILocation(line: 103, column: 4, scope: !7)
